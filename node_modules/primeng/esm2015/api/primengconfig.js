import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { FilterMatchMode } from './filtermatchmode';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class PrimeNGConfig {
    constructor() {
        this.ripple = false;
        this.filterMatchModeOptions = {
            text: [
                FilterMatchMode.STARTS_WITH,
                FilterMatchMode.CONTAINS,
                FilterMatchMode.NOT_CONTAINS,
                FilterMatchMode.ENDS_WITH,
                FilterMatchMode.EQUALS,
                FilterMatchMode.NOT_EQUALS
            ],
            numeric: [
                FilterMatchMode.EQUALS,
                FilterMatchMode.NOT_EQUALS,
                FilterMatchMode.LESS_THAN,
                FilterMatchMode.LESS_THAN_OR_EQUAL_TO,
                FilterMatchMode.GREATER_THAN,
                FilterMatchMode.GREATER_THAN_OR_EQUAL_TO
            ],
            date: [
                FilterMatchMode.IS,
                FilterMatchMode.IS_NOT,
                FilterMatchMode.BEFORE,
                FilterMatchMode.AFTER
            ]
        };
        this.translation = {
            startsWith: 'Starts with',
            contains: 'Contains',
            notContains: 'Not contains',
            endsWith: 'Ends with',
            equals: 'Equals',
            notEquals: 'Not equals',
            lt: 'Less than',
            lte: 'Less than or equal to',
            gt: 'Greater than',
            gte: 'Great then or equals',
            is: 'Is',
            isNot: 'Is not',
            before: 'Before',
            after: 'After',
            clear: 'Clear',
            apply: 'Apply',
            matchAll: 'Match All',
            matchAny: 'Match Any',
            addRule: 'Add Rule',
            removeRule: 'Remove Rule',
            accept: 'Yes',
            reject: 'No',
            choose: 'Choose',
            upload: 'Upload',
            cancel: 'Cancel',
            dayNames: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
            dayNamesShort: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
            dayNamesMin: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
            monthNames: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
            monthNamesShort: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
            today: 'Today',
            weekHeader: 'Wk'
        };
        this.translationSource = new Subject();
        this.translationObserver = this.translationSource.asObservable();
    }
    getTranslation(key) {
        return this.translation[key];
    }
    setTranslation(value) {
        this.translation = Object.assign(Object.assign({}, this.translation), value);
        this.translationSource.next(this.translation);
    }
}
PrimeNGConfig.ɵfac = function PrimeNGConfig_Factory(t) { return new (t || PrimeNGConfig)(); };
PrimeNGConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function PrimeNGConfig_Factory() { return new PrimeNGConfig(); }, token: PrimeNGConfig, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PrimeNGConfig, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWVuZ2NvbmZpZy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2FwcC9jb21wb25lbnRzL2FwaS9wcmltZW5nY29uZmlnLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQ7O0FBR0EsTUFBTSxPQUFPLGFBQWE7QUFDMUIsSUFGQTtBQUFnQixRQUdaLFdBQU0sR0FBWSxLQUFLLENBQUM7QUFDNUIsUUFDSSwyQkFBc0IsR0FBRztBQUM3QixZQUFRLElBQUksRUFBRTtBQUNkLGdCQUFZLGVBQWUsQ0FBQyxXQUFXO0FBQ3ZDLGdCQUFZLGVBQWUsQ0FBQyxRQUFRO0FBQ3BDLGdCQUFZLGVBQWUsQ0FBQyxZQUFZO0FBQ3hDLGdCQUFZLGVBQWUsQ0FBQyxTQUFTO0FBQ3JDLGdCQUFZLGVBQWUsQ0FBQyxNQUFNO0FBQ2xDLGdCQUFZLGVBQWUsQ0FBQyxVQUFVO0FBQ3RDLGFBQVM7QUFDVCxZQUFRLE9BQU8sRUFBRTtBQUNqQixnQkFBWSxlQUFlLENBQUMsTUFBTTtBQUNsQyxnQkFBWSxlQUFlLENBQUMsVUFBVTtBQUN0QyxnQkFBWSxlQUFlLENBQUMsU0FBUztBQUNyQyxnQkFBWSxlQUFlLENBQUMscUJBQXFCO0FBQ2pELGdCQUFZLGVBQWUsQ0FBQyxZQUFZO0FBQ3hDLGdCQUFZLGVBQWUsQ0FBQyx3QkFBd0I7QUFDcEQsYUFBUztBQUNULFlBQVEsSUFBSSxFQUFFO0FBQ2QsZ0JBQVksZUFBZSxDQUFDLEVBQUU7QUFDOUIsZ0JBQVksZUFBZSxDQUFDLE1BQU07QUFDbEMsZ0JBQVksZUFBZSxDQUFDLE1BQU07QUFDbEMsZ0JBQVksZUFBZSxDQUFDLEtBQUs7QUFDakMsYUFBUztBQUNULFNBQUssQ0FBQztBQUNOLFFBQ1ksZ0JBQVcs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ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgRmlsdGVyTWF0Y2hNb2RlIH0gZnJvbSAnLi9maWx0ZXJtYXRjaG1vZGUnO1xuaW1wb3J0IHsgVHJhbnNsYXRpb24gfSBmcm9tICcuL3RyYW5zbGF0aW9uJztcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgUHJpbWVOR0NvbmZpZyB7XG5cbiAgICByaXBwbGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIGZpbHRlck1hdGNoTW9kZU9wdGlvbnMgPSB7XG4gICAgICAgIHRleHQ6IFtcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5TVEFSVFNfV0lUSCxcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5DT05UQUlOUyxcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5OT1RfQ09OVEFJTlMsXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuRU5EU19XSVRILFxuICAgICAgICAgICAgRmlsdGVyTWF0Y2hNb2RlLkVRVUFMUyxcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5OT1RfRVFVQUxTXG4gICAgICAgIF0sXG4gICAgICAgIG51bWVyaWM6IFtcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5FUVVBTFMsXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuTk9UX0VRVUFMUyxcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5MRVNTX1RIQU4sXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuTEVTU19USEFOX09SX0VRVUFMX1RPLFxuICAgICAgICAgICAgRmlsdGVyTWF0Y2hNb2RlLkdSRUFURVJfVEhBTixcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5HUkVBVEVSX1RIQU5fT1JfRVFVQUxfVE9cbiAgICAgICAgXSxcbiAgICAgICAgZGF0ZTogW1xuICAgICAgICAgICAgRmlsdGVyTWF0Y2hNb2RlLklTLFxuICAgICAgICAgICAgRmlsdGVyTWF0Y2hNb2RlLklTX05PVCxcbiAgICAgICAgICAgIEZpbHRlck1hdGNoTW9kZS5CRUZPUkUsXG4gICAgICAgICAgICBGaWx0ZXJNYXRjaE1vZGUuQUZURVJcbiAgICAgICAgXVxuICAgIH07XG5cbiAgICBwcml2YXRlIHRyYW5zbGF0aW9uOiBUcmFuc2xhdGlvbiA9IHtcbiAgICAgICAgc3RhcnRzV2l0aDogJ1N0YXJ0cyB3aXRoJyxcbiAgICAgICAgY29udGFpbnM6ICdDb250YWlucycsXG4gICAgICAgIG5vdENvbnRhaW5zOiAnTm90IGNvbnRhaW5zJyxcbiAgICAgICAgZW5kc1dpdGg6ICdFbmRzIHdpdGgnLFxuICAgICAgICBlcXVhbHM6ICdFcXVhbHMnLFxuICAgICAgICBub3RFcXVhbHM6ICdOb3QgZXF1YWxzJyxcbiAgICAgICAgbHQ6ICdMZXNzIHRoYW4nLFxuICAgICAgICBsdGU6ICdMZXNzIHRoYW4gb3IgZXF1YWwgdG8nLFxuICAgICAgICBndDogJ0dyZWF0ZXIgdGhhbicsXG4gICAgICAgIGd0ZTogJ0dyZWF0IHRoZW4gb3IgZXF1YWxzJyxcbiAgICAgICAgaXM6ICdJcycsXG4gICAgICAgIGlzTm90OiAnSXMgbm90JyxcbiAgICAgICAgYmVmb3JlOiAnQmVmb3JlJyxcbiAgICAgICAgYWZ0ZXI6ICdBZnRlcicsXG4gICAgICAgIGNsZWFyOiAnQ2xlYXInLFxuICAgICAgICBhcHBseTogJ0FwcGx5JyxcbiAgICAgICAgbWF0Y2hBbGw6ICdNYXRjaCBBbGwnLFxuICAgICAgICBtYXRjaEFueTogJ01hdGNoIEFueScsXG4gICAgICAgIGFkZFJ1bGU6ICdBZGQgUnVsZScsXG4gICAgICAgIHJlbW92ZVJ1bGU6ICdSZW1vdmUgUnVsZScsXG4gICAgICAgIGFjY2VwdDogJ1llcycsXG4gICAgICAgIHJlamVjdDogJ05vJyxcbiAgICAgICAgY2hvb3NlOiAnQ2hvb3NlJyxcbiAgICAgICAgdXBsb2FkOiAnVXBsb2FkJyxcbiAgICAgICAgY2FuY2VsOiAnQ2FuY2VsJyxcbiAgICAgICAgZGF5TmFtZXM6IFtcIlN1bmRheVwiLCBcIk1vbmRheVwiLCBcIlR1ZXNkYXlcIiwgXCJXZWRuZXNkYXlcIiwgXCJUaHVyc2RheVwiLCBcIkZyaWRheVwiLCBcIlNhdHVyZGF5XCJdLFxuICAgICAgICBkYXlOYW1lc1Nob3J0OiBbXCJTdW5cIiwgXCJNb25cIiwgXCJUdWVcIiwgXCJXZWRcIiwgXCJUaHVcIiwgXCJGcmlcIiwgXCJTYXRcIl0sXG4gICAgICAgIGRheU5hbWVzTWluOiBbXCJTdVwiLFwiTW9cIixcIlR1XCIsXCJXZVwiLFwiVGhcIixcIkZyXCIsXCJTYVwiXSxcbiAgICAgICAgbW9udGhOYW1lczogW1wiSmFudWFyeVwiLFwiRmVicnVhcnlcIixcIk1hcmNoXCIsXCJBcHJpbFwiLFwiTWF5XCIsXCJKdW5lXCIsXCJKdWx5XCIsXCJBdWd1c3RcIixcIlNlcHRlbWJlclwiLFwiT2N0b2JlclwiLFwiTm92ZW1iZXJcIixcIkRlY2VtYmVyXCJdLFxuICAgICAgICBtb250aE5hbWVzU2hvcnQ6IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdLFxuICAgICAgICB0b2RheTogJ1RvZGF5JyxcbiAgICAgICAgd2Vla0hlYWRlcjogJ1drJ1xuICAgIH1cblxuICAgIHByaXZhdGUgdHJhbnNsYXRpb25Tb3VyY2UgPSBuZXcgU3ViamVjdDxhbnk+KCk7XG4gICAgXG4gICAgdHJhbnNsYXRpb25PYnNlcnZlciA9IHRoaXMudHJhbnNsYXRpb25Tb3VyY2UuYXNPYnNlcnZhYmxlKCk7XG4gICAgXG4gICAgZ2V0VHJhbnNsYXRpb24oa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRpb25ba2V5XTtcbiAgICB9XG5cbiAgICBzZXRUcmFuc2xhdGlvbih2YWx1ZTogVHJhbnNsYXRpb24pIHtcbiAgICAgICAgdGhpcy50cmFuc2xhdGlvbiA9IHsuLi50aGlzLnRyYW5zbGF0aW9uLCAuLi52YWx1ZX07XG4gICAgICAgIHRoaXMudHJhbnNsYXRpb25Tb3VyY2UubmV4dCh0aGlzLnRyYW5zbGF0aW9uKTtcbiAgICB9XG59Il19