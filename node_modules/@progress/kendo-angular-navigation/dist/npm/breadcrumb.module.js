/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var breadcrumb_component_1 = require("./breadcrumb/breadcrumb.component");
var breadcrumb_item_component_1 = require("./breadcrumb/breadcrumb-item.component");
var item_template_directive_1 = require("./breadcrumb/template-directives/item-template.directive");
var separator_directive_1 = require("./breadcrumb/template-directives/separator.directive");
var list_component_1 = require("./breadcrumb/list.component");
var ɵngcc0 = require('@angular/core');
var ɵngcc1 = require('./breadcrumb/breadcrumb.component');
var ɵngcc2 = require('./breadcrumb/breadcrumb-item.component');
var ɵngcc3 = require('./breadcrumb/list.component');
var ɵngcc4 = require('./breadcrumb/template-directives/item-template.directive');
var ɵngcc5 = require('./breadcrumb/template-directives/separator.directive');
var ɵngcc6 = require('@angular/common');
var ɵngcc7 = require('@progress/kendo-angular-common');
var templateDirectives = [
    item_template_directive_1.BreadCrumbItemTemplateDirective
];
var exportedModules = [
    breadcrumb_component_1.BreadCrumbComponent,
    breadcrumb_item_component_1.BreadCrumbItemComponent,
    list_component_1.BreadCrumbListComponent
].concat(templateDirectives);
var declarations = exportedModules.concat([
    separator_directive_1.BreadCrumbSeparatorDirective
]);
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the BreadCrumb component.
 * @example
 *
 * ```ts-no-run
 * // Import the BreadCrumb module
 * import { BreadCrumbModule } from '@progress/kendo-angular-navigation';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { BrowserModule } from '@angular/platform-browser';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, BreadCrumbModule], // import BreadCrumb module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var BreadCrumbModule = /** @class */ (function () {
    function BreadCrumbModule() {
    }
BreadCrumbModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BreadCrumbModule });
BreadCrumbModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BreadCrumbModule_Factory(t) { return new (t || BreadCrumbModule)(); }, imports: [[common_1.CommonModule, kendo_angular_common_1.ResizeSensorModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BreadCrumbModule, { declarations: [ɵngcc1.BreadCrumbComponent, ɵngcc2.BreadCrumbItemComponent, ɵngcc3.BreadCrumbListComponent, ɵngcc4.BreadCrumbItemTemplateDirective, ɵngcc5.BreadCrumbSeparatorDirective], imports: [ɵngcc6.CommonModule, ɵngcc7.ResizeSensorModule], exports: [ɵngcc1.BreadCrumbComponent, ɵngcc2.BreadCrumbItemComponent, ɵngcc3.BreadCrumbListComponent, ɵngcc4.BreadCrumbItemTemplateDirective] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadCrumbModule, [{
        type: core_1.NgModule,
        args: [{
                declarations: [declarations],
                exports: [exportedModules],
                imports: [common_1.CommonModule, kendo_angular_common_1.ResizeSensorModule]
            }]
    }], function () { return []; }, null); })();
    return BreadCrumbModule;
}());
exports.BreadCrumbModule = BreadCrumbModule;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5tb2R1bGUuanMiLCJzb3VyY2VzIjpbImJyZWFkY3J1bWIubW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztnREFPeUI7QUFDekI7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb21tb25cIik7XG52YXIga2VuZG9fYW5ndWxhcl9jb21tb25fMSA9IHJlcXVpcmUoXCJAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1jb21tb25cIik7XG52YXIgYnJlYWRjcnVtYl9jb21wb25lbnRfMSA9IHJlcXVpcmUoXCIuL2JyZWFkY3J1bWIvYnJlYWRjcnVtYi5jb21wb25lbnRcIik7XG52YXIgYnJlYWRjcnVtYl9pdGVtX2NvbXBvbmVudF8xID0gcmVxdWlyZShcIi4vYnJlYWRjcnVtYi9icmVhZGNydW1iLWl0ZW0uY29tcG9uZW50XCIpO1xudmFyIGl0ZW1fdGVtcGxhdGVfZGlyZWN0aXZlXzEgPSByZXF1aXJlKFwiLi9icmVhZGNydW1iL3RlbXBsYXRlLWRpcmVjdGl2ZXMvaXRlbS10ZW1wbGF0ZS5kaXJlY3RpdmVcIik7XG52YXIgc2VwYXJhdG9yX2RpcmVjdGl2ZV8xID0gcmVxdWlyZShcIi4vYnJlYWRjcnVtYi90ZW1wbGF0ZS1kaXJlY3RpdmVzL3NlcGFyYXRvci5kaXJlY3RpdmVcIik7XG52YXIgbGlzdF9jb21wb25lbnRfMSA9IHJlcXVpcmUoXCIuL2JyZWFkY3J1bWIvbGlzdC5jb21wb25lbnRcIik7XG52YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gW1xuICAgIGl0ZW1fdGVtcGxhdGVfZGlyZWN0aXZlXzEuQnJlYWRDcnVtYkl0ZW1UZW1wbGF0ZURpcmVjdGl2ZVxuXTtcbnZhciBleHBvcnRlZE1vZHVsZXMgPSBbXG4gICAgYnJlYWRjcnVtYl9jb21wb25lbnRfMS5CcmVhZENydW1iQ29tcG9uZW50LFxuICAgIGJyZWFkY3J1bWJfaXRlbV9jb21wb25lbnRfMS5CcmVhZENydW1iSXRlbUNvbXBvbmVudCxcbiAgICBsaXN0X2NvbXBvbmVudF8xLkJyZWFkQ3J1bWJMaXN0Q29tcG9uZW50XG5dLmNvbmNhdCh0ZW1wbGF0ZURpcmVjdGl2ZXMpO1xudmFyIGRlY2xhcmF0aW9ucyA9IGV4cG9ydGVkTW9kdWxlcy5jb25jYXQoW1xuICAgIHNlcGFyYXRvcl9kaXJlY3RpdmVfMS5CcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlXG5dKTtcbi8qKlxuICogUmVwcmVzZW50cyB0aGUgW05nTW9kdWxlXSh7eyBzaXRlLmRhdGEudXJscy5hbmd1bGFyWyduZ21vZHVsZWFwaSddIH19KVxuICogZGVmaW5pdGlvbiBmb3IgdGhlIEJyZWFkQ3J1bWIgY29tcG9uZW50LlxuICogQGV4YW1wbGVcbiAqXG4gKiBgYGB0cy1uby1ydW5cbiAqIC8vIEltcG9ydCB0aGUgQnJlYWRDcnVtYiBtb2R1bGVcbiAqIGltcG9ydCB7IEJyZWFkQ3J1bWJNb2R1bGUgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1uYXZpZ2F0aW9uJztcbiAqXG4gKiAvLyBUaGUgYnJvd3NlciBwbGF0Zm9ybSB3aXRoIGEgY29tcGlsZXJcbiAqIGltcG9ydCB7IHBsYXRmb3JtQnJvd3NlckR5bmFtaWMgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyLWR5bmFtaWMnO1xuICogaW1wb3J0IHsgQnJvd3Nlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuICpcbiAqIGltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG4gKlxuICogLy8gSW1wb3J0IHRoZSBhcHAgY29tcG9uZW50XG4gKiBpbXBvcnQgeyBBcHBDb21wb25lbnQgfSBmcm9tICcuL2FwcC5jb21wb25lbnQnO1xuICpcbiAqIC8vIERlZmluZSB0aGUgYXBwIG1vZHVsZVxuICogX0BOZ01vZHVsZSh7XG4gKiAgICAgZGVjbGFyYXRpb25zOiBbQXBwQ29tcG9uZW50XSwgLy8gZGVjbGFyZSBhcHAgY29tcG9uZW50XG4gKiAgICAgaW1wb3J0czogICAgICBbQnJvd3Nlck1vZHVsZSwgQnJlYWRDcnVtYk1vZHVsZV0sIC8vIGltcG9ydCBCcmVhZENydW1iIG1vZHVsZVxuICogICAgIGJvb3RzdHJhcDogICAgW0FwcENvbXBvbmVudF1cbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgQXBwTW9kdWxlIHt9XG4gKlxuICogLy8gQ29tcGlsZSBhbmQgbGF1bmNoIHRoZSBtb2R1bGVcbiAqIHBsYXRmb3JtQnJvd3NlckR5bmFtaWMoKS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlKTtcbiAqXG4gKiBgYGBcbiAqL1xudmFyIEJyZWFkQ3J1bWJNb2R1bGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnJlYWRDcnVtYk1vZHVsZSgpIHtcbiAgICB9XG4gICAgQnJlYWRDcnVtYk1vZHVsZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5OZ01vZHVsZSh7XG4gICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtkZWNsYXJhdGlvbnNdLFxuICAgICAgICAgICAgZXhwb3J0czogW2V4cG9ydGVkTW9kdWxlc10sXG4gICAgICAgICAgICBpbXBvcnRzOiBbY29tbW9uXzEuQ29tbW9uTW9kdWxlLCBrZW5kb19hbmd1bGFyX2NvbW1vbl8xLlJlc2l6ZVNlbnNvck1vZHVsZV1cbiAgICAgICAgfSlcbiAgICBdLCBCcmVhZENydW1iTW9kdWxlKTtcbiAgICByZXR1cm4gQnJlYWRDcnVtYk1vZHVsZTtcbn0oKSk7XG5leHBvcnRzLkJyZWFkQ3J1bWJNb2R1bGUgPSBCcmVhZENydW1iTW9kdWxlO1xuIl19