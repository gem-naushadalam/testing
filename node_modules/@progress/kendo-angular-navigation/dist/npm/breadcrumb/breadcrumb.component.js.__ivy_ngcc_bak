/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var kendo_licensing_1 = require("@progress/kendo-licensing");
var package_metadata_1 = require("../package-metadata");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var item_template_directive_1 = require("./template-directives/item-template.directive");
var util_1 = require("../common/util");
var list_component_1 = require("./list.component");
var util_2 = require("./util");
/**
 * Represents the [Kendo UI Breadcrumb component for Angular]({% slug overview_breadcrumb %}).
 *
 * @example
 * ```ts-no-run
 * _@Component({
 *      selector: 'my-app',
 *      template: `
 *          <kendo-breadcrumb
 *              [items]="items"
 *              (itemClick)="onItemClick($event)">
 *          </kendo-breadcrumb>
 *      `
 * })
 * class AppComponent {
 *      public items: BreadCrumbItem[] = [
 *          { text: 'Home', title: 'Home', icon: 'home' },
 *          { text: 'Kids', title: 'Kids' },
 *          { text: '8y-16y', title: '8y-16y', disabled: true },
 *          { text: 'New collection', title: 'New collection' },
 *          { text: 'Jeans', title: 'Jeans' }
 *      ];
 *
 *      public onItemClick(item: BreadCrumbItem): void {
 *          console.log(item);
 *      }
 * }
 * ```
 */
var BreadCrumbComponent = /** @class */ (function () {
    function BreadCrumbComponent(el, cdr, zone, localization) {
        this.el = el;
        this.cdr = cdr;
        this.zone = zone;
        this.localization = localization;
        /**
         * Fires when a Breadcrumb item is clicked. The event will not be fired by disabled items and the last item.
         */
        this.itemClick = new core_1.EventEmitter();
        this.hostClasses = true;
        this._items = [];
        this._collapseMode = 'auto';
        this.updateItems = new rxjs_1.ReplaySubject();
        this.afterViewInit = new rxjs_1.Subject();
        this.subscriptions = new rxjs_1.Subscription();
        this.direction = 'ltr';
        kendo_licensing_1.validatePackage(package_metadata_1.packageMetadata);
        var updateItems$ = this.updateItems.asObservable().pipe(operators_1.startWith([]));
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.itemsData$ = updateItems$.pipe(operators_1.map(function (items) { return items.filter(Boolean); }), operators_1.map(function (items) {
            return items.map(function (item, index, collection) { return ({
                context: {
                    collapsed: false,
                    isLast: index === collection.length - 1,
                    isFirst: index === 0
                },
                data: item
            }); });
        }), operators_1.share());
        this.firstItem$ = updateItems$.pipe(operators_1.map(function (items) {
            if (items.length > 0) {
                return [
                    {
                        context: {
                            collapsed: false,
                            isLast: items.length === 1,
                            isFirst: true
                        },
                        data: items[0]
                    }
                ];
            }
            return [];
        }), operators_1.share());
    }
    Object.defineProperty(BreadCrumbComponent.prototype, "items", {
        get: function () {
            return this._items;
        },
        /**
         * The collection of items that will be rendered in the Breadcrumb.
         */
        set: function (items) {
            this._items = items || [];
            this.updateItems.next(this._items);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BreadCrumbComponent.prototype, "collapseMode", {
        get: function () {
            return this._collapseMode;
        },
        /**
         * Specifies the collapse mode of the Breadcrumb ([see example]({% slug collapse_modes_breadcrumb %})).
         *
         * The possible values are:
         * - `auto` (default)&mdash;items are automatically collapsed based on the width of the Breadcrumb.
         * - `wrap`&mdash;items are wrapped on multiple rows.
         * - `none`&mdash;all items are expanded on the same row.
         *
         * For more information and example refer to the [Collapse Modes]({% slug collapse_modes_breadcrumb %}) article.
         */
        set: function (mode) {
            if (core_1.isDevMode() && ['auto', 'wrap', 'none'].indexOf(mode) < 0) {
                throw new Error('Invalid collapse mode. Allowed values are "auto", "wrap" or "none". \nFor more details see https://www.telerik.com/kendo-angular-ui/components/navigation/api/BreadCrumbCollapseMode/');
            }
            this._collapseMode = mode || 'auto';
            this.updateItems.next(this.items);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BreadCrumbComponent.prototype, "wrapMode", {
        get: function () {
            return this.collapseMode === 'wrap';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BreadCrumbComponent.prototype, "getDir", {
        get: function () {
            return this.direction;
        },
        enumerable: true,
        configurable: true
    });
    BreadCrumbComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subscriptions.add(this.localization.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            return (_this.direction = rtl ? 'rtl' : 'ltr');
        }));
    };
    BreadCrumbComponent.prototype.ngAfterViewInit = function () {
        this.attachResizeHandler();
        this.afterViewInit.next();
    };
    BreadCrumbComponent.prototype.ngOnDestroy = function () {
        this.subscriptions.unsubscribe();
    };
    BreadCrumbComponent.prototype.handleResize = function () {
        var autoCollapseCandidates = this.listComponent.renderedItems.toArray().filter(function (ri) { return !ri.item.context.isFirst && !ri.item.context.isLast; }).slice();
        var componentWidth = util_1.outerWidth(this.el.nativeElement);
        var itemsContainerWidth = Math.floor(this.itemsContainers
            .toArray()
            .map(function (el) { return util_1.outerWidth(el.nativeElement); })
            .reduce(function (acc, curr) { return acc + curr; }, 0));
        var nextExpandWidth = (autoCollapseCandidates.slice().reverse().find(util_2.collapsed) || { width: 0 }).width;
        // // shrink
        if (componentWidth <= itemsContainerWidth && autoCollapseCandidates.find(util_2.expanded)) {
            util_2.collapseFirst(autoCollapseCandidates);
            // needed by resize sensor
            this.cdr.detectChanges();
            return this.handleResize();
        }
        // expand
        if (componentWidth > itemsContainerWidth + nextExpandWidth && autoCollapseCandidates.find(util_2.collapsed)) {
            util_2.expandFirst(autoCollapseCandidates.slice().reverse());
            // needed by resize sensor
            this.cdr.detectChanges();
            return this.handleResize();
        }
    };
    BreadCrumbComponent.prototype.shouldResize = function () {
        return kendo_angular_common_1.isDocumentAvailable() && this.collapseMode === 'auto';
    };
    BreadCrumbComponent.prototype.attachResizeHandler = function () {
        var _this = this;
        // resize when:
        // the component is initialized
        // the container is resized
        // items are added/removed
        this.subscriptions.add(rxjs_1.merge(this.resizeSensor.resize, this.itemsData$, this.afterViewInit.asObservable())
            .pipe(operators_1.filter(function () { return _this.shouldResize(); }))
            .subscribe(function () {
            _this.zone.runOutsideAngular(function () {
                return setTimeout(function () {
                    _this.zone.run(function () {
                        if (_this.listComponent) {
                            _this.handleResize();
                            _this.resizeSensor.acceptSize();
                        }
                    });
                });
            });
        }));
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array),
        tslib_1.__metadata("design:paramtypes", [Array])
    ], BreadCrumbComponent.prototype, "items", null);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], BreadCrumbComponent.prototype, "separatorIcon", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], BreadCrumbComponent.prototype, "collapseMode", null);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], BreadCrumbComponent.prototype, "itemClick", void 0);
    tslib_1.__decorate([
        core_1.ViewChild('resizeSensor', { static: true }),
        tslib_1.__metadata("design:type", kendo_angular_common_1.ResizeSensorComponent)
    ], BreadCrumbComponent.prototype, "resizeSensor", void 0);
    tslib_1.__decorate([
        core_1.ViewChildren('itemsContainer', { read: core_1.ElementRef }),
        tslib_1.__metadata("design:type", core_1.QueryList)
    ], BreadCrumbComponent.prototype, "itemsContainers", void 0);
    tslib_1.__decorate([
        core_1.ViewChild(list_component_1.BreadCrumbListComponent, { static: true }),
        tslib_1.__metadata("design:type", list_component_1.BreadCrumbListComponent)
    ], BreadCrumbComponent.prototype, "listComponent", void 0);
    tslib_1.__decorate([
        core_1.ContentChild(item_template_directive_1.BreadCrumbItemTemplateDirective, { static: true }),
        tslib_1.__metadata("design:type", item_template_directive_1.BreadCrumbItemTemplateDirective)
    ], BreadCrumbComponent.prototype, "itemTemplate", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('class.k-widget'),
        core_1.HostBinding('class.k-breadcrumb'),
        tslib_1.__metadata("design:type", Boolean)
    ], BreadCrumbComponent.prototype, "hostClasses", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('class.k-breadcrumb-wrap'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], BreadCrumbComponent.prototype, "wrapMode", null);
    tslib_1.__decorate([
        core_1.HostBinding('attr.dir'),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [])
    ], BreadCrumbComponent.prototype, "getDir", null);
    BreadCrumbComponent = tslib_1.__decorate([
        core_1.Component({
            exportAs: 'kendoBreadCrumb',
            selector: 'kendo-breadcrumb',
            providers: [
                kendo_angular_l10n_1.LocalizationService,
                {
                    provide: kendo_angular_l10n_1.L10N_PREFIX,
                    useValue: 'kendo.breadcrumb'
                }
            ],
            template: "\n        <ol\n            #itemsContainer\n            kendoBreadCrumbList\n            class=\"k-breadcrumb-root-item-container\"\n            *ngIf=\"collapseMode === 'wrap'\"\n            [items]=\"firstItem$ | async\"\n            [itemTemplate]=\"itemTemplate?.templateRef\"\n            [collapseMode]=\"collapseMode\"\n            [separatorIcon]=\"separatorIcon\"\n            (itemClick)=\"itemClick.emit($event)\"\n        ></ol>\n        <ol\n            #itemsContainer\n            kendoBreadCrumbList\n            class=\"k-breadcrumb-container\"\n            [items]=\"itemsData$ | async\"\n            [itemTemplate]=\"itemTemplate?.templateRef\"\n            [collapseMode]=\"collapseMode\"\n            [separatorIcon]=\"separatorIcon\"\n            (itemClick)=\"itemClick.emit($event)\"\n            [ngClass]=\"{ 'k-flex-wrap': collapseMode === 'wrap', 'k-flex-none': collapseMode === 'none' }\"\n        ></ol>\n        <kendo-resize-sensor [rateLimit]=\"1000\" #resizeSensor></kendo-resize-sensor>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [core_1.ElementRef,
            core_1.ChangeDetectorRef,
            core_1.NgZone,
            kendo_angular_l10n_1.LocalizationService])
    ], BreadCrumbComponent);
    return BreadCrumbComponent;
}());
exports.BreadCrumbComponent = BreadCrumbComponent;
