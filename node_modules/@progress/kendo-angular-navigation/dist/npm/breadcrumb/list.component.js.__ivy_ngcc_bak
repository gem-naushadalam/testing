/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
var kendo_angular_common_1 = require("@progress/kendo-angular-common");
var constants_1 = require("./models/constants");
var breadcrumb_item_component_1 = require("./breadcrumb-item.component");
var dom_queries_1 = require("../common/dom-queries");
var util_1 = require("../common/util");
/**
 * @hidden
 */
var BreadCrumbListComponent = /** @class */ (function () {
    function BreadCrumbListComponent(el, zone) {
        var _this = this;
        this.el = el;
        this.zone = zone;
        this.items = [];
        this.collapseMode = 'auto';
        this.itemClick = new core_1.EventEmitter();
        var element = this.el.nativeElement;
        this.isRootItemContainer = element.classList.contains('k-breadcrumb-root-item-container');
        this.zone.runOutsideAngular(function () {
            var click$ = rxjs_1.fromEvent(element, 'click');
            var enterKey$ = rxjs_1.fromEvent(element, 'keydown').pipe(operators_1.filter(function (ev /* KeyboardEvent causes lint error */) { return ev.keyCode === kendo_angular_common_1.Keys.Enter; }));
            _this.domEventsSubscription = rxjs_1.merge(click$, enterKey$)
                .pipe(operators_1.map(function (ev) { return ev.target; }), operators_1.filter(function (e) { return !e.classList.contains('k-breadcrumb-delimiter-icon'); }), // do not trigger handler when a separator is clicked
            operators_1.map(function (e) { return _this.getItemIndex(e); }), operators_1.filter(util_1.isPresent), operators_1.map(function (i) { return parseInt(i, 10); }), operators_1.map(function (i) { return _this.items[i]; }), operators_1.filter(function (item) { return !item.data.disabled && !item.context.isLast; }), operators_1.map(function (item) { return item.data; }))
                .subscribe(function (el) {
                _this.zone.run(function () { return _this.itemClick.emit(el); });
            });
        });
    }
    BreadCrumbListComponent.prototype.ngOnDestroy = function () {
        this.domEventsSubscription.unsubscribe();
    };
    BreadCrumbListComponent.prototype.getItemIndex = function (target) {
        var item = dom_queries_1.closestItem(target, constants_1.BREADCRUMB_ITEM_INDEX, this.el.nativeElement);
        if (item) {
            return dom_queries_1.itemIndex(item, constants_1.BREADCRUMB_ITEM_INDEX);
        }
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Array)
    ], BreadCrumbListComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", core_1.TemplateRef)
    ], BreadCrumbListComponent.prototype, "itemTemplate", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], BreadCrumbListComponent.prototype, "collapseMode", void 0);
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String)
    ], BreadCrumbListComponent.prototype, "separatorIcon", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], BreadCrumbListComponent.prototype, "itemClick", void 0);
    tslib_1.__decorate([
        core_1.ViewChildren(breadcrumb_item_component_1.BreadCrumbItemComponent, { static: true }),
        tslib_1.__metadata("design:type", core_1.QueryList)
    ], BreadCrumbListComponent.prototype, "renderedItems", void 0);
    BreadCrumbListComponent = tslib_1.__decorate([
        core_1.Component({
            selector: '[kendoBreadCrumbList]',
            template: "\n        <ng-container *ngFor=\"let item of items; let i = index; let isFirst = first; let isLast = last\">\n            <li\n                #renderedItem\n                kendoBreadCrumbItem\n                *ngIf=\"!(collapseMode === 'wrap' && isFirst) || isRootItemContainer\"\n                [attr." + constants_1.BREADCRUMB_ITEM_INDEX + "]=\"i\"\n                [item]=\"item\"\n                [index]=\"i\"\n                [collapseMode]=\"collapseMode\"\n                [itemTemplate]=\"itemTemplate\"\n            >\n                <span kendoBreadCrumbSeparator [icon]=\"separatorIcon\" *ngIf=\"collapseMode === 'wrap' && !isFirst\"></span>\n                <span\n                    kendoBreadCrumbSeparator\n                    [icon]=\"separatorIcon\"\n                    *ngIf=\"collapseMode !== 'wrap' && !isLast && !(item?.context.collapsed && items[i + 1]?.context.collapsed)\"\n                ></span>\n            </li>\n        </ng-container>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [core_1.ElementRef, core_1.NgZone])
    ], BreadCrumbListComponent);
    return BreadCrumbListComponent;
}());
exports.BreadCrumbListComponent = BreadCrumbListComponent;
