/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var util_1 = require("../../common/util");
var kendo_angular_l10n_1 = require("@progress/kendo-angular-l10n");
var ɵngcc0 = require('@angular/core');
var ɵngcc1 = require('@progress/kendo-angular-l10n');
var DEFAULT_ICON = 'arrow-chevron-right';
var DEFAULT_RTL_ICON = 'arrow-chevron-left';
/**
 * @hidden
 */
var BreadCrumbSeparatorDirective = /** @class */ (function () {
    function BreadCrumbSeparatorDirective(el, localization) {
        this.el = el;
        this.localization = localization;
        this.defaultClasses = true;
        this.ariaHidden = true;
        this.direction = 'ltr';
        this.direction = this.localization.rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(BreadCrumbSeparatorDirective.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (icon) {
            var element = this.el.nativeElement;
            element.classList.remove("k-i-" + this._icon);
            if (util_1.isPresent(icon)) {
                this._icon = icon;
                this.hasDefaultIcon = false;
            }
            else {
                this._icon = this.direction === 'ltr' ? DEFAULT_ICON : DEFAULT_RTL_ICON;
                this.hasDefaultIcon = true;
            }
            element.classList.add("k-i-" + this._icon);
        },
        enumerable: true,
        configurable: true
    });
    BreadCrumbSeparatorDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.localizationChangesSubscription = this.localization.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
            if (_this.hasDefaultIcon) {
                _this.icon = undefined;
            }
        });
    };
    BreadCrumbSeparatorDirective.prototype.ngOnDestroy = function () {
        this.localizationChangesSubscription.unsubscribe();
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], BreadCrumbSeparatorDirective.prototype, "icon", null);
    tslib_1.__decorate([
        core_1.HostBinding('class.k-breadcrumb-delimiter-icon'),
        core_1.HostBinding('class.k-icon'),
        tslib_1.__metadata("design:type", Boolean)
    ], BreadCrumbSeparatorDirective.prototype, "defaultClasses", void 0);
    tslib_1.__decorate([
        core_1.HostBinding('attr.aria-hidden'),
        tslib_1.__metadata("design:type", Boolean)
    ], BreadCrumbSeparatorDirective.prototype, "ariaHidden", void 0);
    BreadCrumbSeparatorDirective = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [core_1.ElementRef, kendo_angular_l10n_1.LocalizationService])
    ], BreadCrumbSeparatorDirective);
BreadCrumbSeparatorDirective.ɵfac = function BreadCrumbSeparatorDirective_Factory(t) { return new (t || BreadCrumbSeparatorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService)); };
BreadCrumbSeparatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BreadCrumbSeparatorDirective, selectors: [["", "kendoBreadCrumbSeparator", ""]], hostVars: 5, hostBindings: function BreadCrumbSeparatorDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-hidden", ctx.ariaHidden);
        ɵngcc0.ɵɵclassProp("k-breadcrumb-delimiter-icon", ctx.defaultClasses)("k-icon", ctx.defaultClasses);
    } }, inputs: { icon: "icon" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadCrumbSeparatorDirective, [{
        type: core_1.Directive,
        args: [{
                selector: '[kendoBreadCrumbSeparator]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.LocalizationService }]; }, { defaultClasses: [{
            type: core_1.HostBinding,
            args: ['class.k-breadcrumb-delimiter-icon']
        }, {
            type: core_1.HostBinding,
            args: ['class.k-icon']
        }], ariaHidden: [{
            type: core_1.HostBinding,
            args: ['attr.aria-hidden']
        }], icon: [{
            type: core_1.Input
        }] }); })();
    return BreadCrumbSeparatorDirective;
}());
exports.BreadCrumbSeparatorDirective = BreadCrumbSeparatorDirective;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VwYXJhdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsic2VwYXJhdG9yLmRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFJTztBQUNQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFxQztBQUNyQztBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21tb24vdXRpbFwiKTtcbnZhciBrZW5kb19hbmd1bGFyX2wxMG5fMSA9IHJlcXVpcmUoXCJAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1sMTBuXCIpO1xudmFyIERFRkFVTFRfSUNPTiA9ICdhcnJvdy1jaGV2cm9uLXJpZ2h0JztcbnZhciBERUZBVUxUX1JUTF9JQ09OID0gJ2Fycm93LWNoZXZyb24tbGVmdCc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xudmFyIEJyZWFkQ3J1bWJTZXBhcmF0b3JEaXJlY3RpdmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZShlbCwgbG9jYWxpemF0aW9uKSB7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgdGhpcy5sb2NhbGl6YXRpb24gPSBsb2NhbGl6YXRpb247XG4gICAgICAgIHRoaXMuZGVmYXVsdENsYXNzZXMgPSB0cnVlO1xuICAgICAgICB0aGlzLmFyaWFIaWRkZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICdsdHInO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMubG9jYWxpemF0aW9uLnJ0bCA/ICdydGwnIDogJ2x0cic7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJpY29uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faWNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaWNvbikge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJrLWktXCIgKyB0aGlzLl9pY29uKTtcbiAgICAgICAgICAgIGlmICh1dGlsXzEuaXNQcmVzZW50KGljb24pKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faWNvbiA9IGljb247XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNEZWZhdWx0SWNvbiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5faWNvbiA9IHRoaXMuZGlyZWN0aW9uID09PSAnbHRyJyA/IERFRkFVTFRfSUNPTiA6IERFRkFVTFRfUlRMX0lDT047XG4gICAgICAgICAgICAgICAgdGhpcy5oYXNEZWZhdWx0SWNvbiA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJrLWktXCIgKyB0aGlzLl9pY29uKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZS5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uQ2hhbmdlc1N1YnNjcmlwdGlvbiA9IHRoaXMubG9jYWxpemF0aW9uLmNoYW5nZXMuc3Vic2NyaWJlKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIHJ0bCA9IF9hLnJ0bDtcbiAgICAgICAgICAgIF90aGlzLmRpcmVjdGlvbiA9IHJ0bCA/ICdydGwnIDogJ2x0cic7XG4gICAgICAgICAgICBpZiAoX3RoaXMuaGFzRGVmYXVsdEljb24pIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pY29uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEJyZWFkQ3J1bWJTZXBhcmF0b3JEaXJlY3RpdmUucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxvY2FsaXphdGlvbkNoYW5nZXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbnB1dCgpLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBTdHJpbmcpLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbU3RyaW5nXSlcbiAgICBdLCBCcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJpY29uXCIsIG51bGwpO1xuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5Ib3N0QmluZGluZygnY2xhc3Muay1icmVhZGNydW1iLWRlbGltaXRlci1pY29uJyksXG4gICAgICAgIGNvcmVfMS5Ib3N0QmluZGluZygnY2xhc3Muay1pY29uJyksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXG4gICAgXSwgQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZS5wcm90b3R5cGUsIFwiZGVmYXVsdENsYXNzZXNcIiwgdm9pZCAwKTtcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSG9zdEJpbmRpbmcoJ2F0dHIuYXJpYS1oaWRkZW4nKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcbiAgICBdLCBCcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJhcmlhSGlkZGVuXCIsIHZvaWQgMCk7XG4gICAgQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5EaXJlY3RpdmUoe1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdba2VuZG9CcmVhZENydW1iU2VwYXJhdG9yXSdcbiAgICAgICAgfSksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtjb3JlXzEuRWxlbWVudFJlZiwga2VuZG9fYW5ndWxhcl9sMTBuXzEuTG9jYWxpemF0aW9uU2VydmljZV0pXG4gICAgXSwgQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZSk7XG4gICAgcmV0dXJuIEJyZWFkQ3J1bWJTZXBhcmF0b3JEaXJlY3RpdmU7XG59KCkpO1xuZXhwb3J0cy5CcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlID0gQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZTtcbiJdfQ==