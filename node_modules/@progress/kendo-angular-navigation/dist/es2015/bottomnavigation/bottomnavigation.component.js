/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { BottomNavigationSelectEvent } from './events/select-event';
import { Component, HostBinding, Input, Output, EventEmitter, ElementRef, Renderer2, ContentChild, NgZone, ChangeDetectorRef } from '@angular/core';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { Subscription } from 'rxjs';
import { Keys } from '@progress/kendo-angular-common';
import { BottomNavigationItemTemplateDirective } from './templates/item-template.directive';
import { closestItem, itemIndex } from '../common/dom-queries';
import { BOTTOMNAVIGATION_ITEM_INDEX, colors } from './constants';
/**
 * Represents the [Kendo UI BottomNavigation component for Angular]({% slug overview_bottomnavigation %}).
 *
 * @example
 * ```ts-no-run
 * _@Component({
 *      selector: 'my-app',
 *      template: `
 *          <kendo-bottomnavigation [items]="items"></kendo-bottomnavigation>
 *      `
 * })
 * class AppComponent {
 *      public items: Array<any> = [
 *          { text: 'Inbox', icon: 'email', selected: true },
 *          { text: 'Calendar', icon: 'calendar'},
 *          { text: 'Profile', icon: 'user'}
 *      ]
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@progress/kendo-angular-l10n';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from './bottomnavigation-item.component';

function BottomNavigationComponent_ng_container_0_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 2);
} if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const idx_r3 = ctx.index;
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("disabledComponent", ctx_r1.disabled)("item", item_r2)("index", idx_r3)("selectedIdx", ctx_r1.selectedIdx)("itemTemplate", ctx_r1.itemTemplate)("ngClass", item_r2.cssClass)("ngStyle", item_r2.cssStyle);
    ɵngcc0.ɵɵattribute("data-kendo-bottomnavigation-index", idx_r3);
} }
function BottomNavigationComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, BottomNavigationComponent_ng_container_0_span_1_Template, 1, 8, "span", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.items);
} }
let BottomNavigationComponent = class BottomNavigationComponent {
    constructor(localization, hostElement, ngZone, changeDetector, renderer) {
        this.localization = localization;
        this.hostElement = hostElement;
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        /**
         * Sets a top border to the BottomNavigation ([see example]({% slug appearance_bottomnavigation %})).
         *
         * @default false
         */
        this.border = false;
        /**
         * Disables the whole BottomNavigation.
         *
         * @default false
         */
        this.disabled = false;
        /**
         * Fires each time an item is selected. This event is preventable.
         */
        this.select = new EventEmitter();
        /**
         * @hidden
         */
        this.hostClass = true;
        /**
         * @hidden
         */
        this.role = 'navigation';
        this._fill = 'flat';
        this._itemFlow = 'vertical';
        this._positionMode = 'fixed';
        this._themeColor = 'primary';
        this._nativeHostElement = this.hostElement.nativeElement;
        this.subscriptions = new Subscription();
        this.rtl = false;
        this.dynamicRTLSubscription = this.localization.changes.subscribe(({ rtl }) => {
            this.rtl = rtl;
            this.direction = this.rtl ? 'rtl' : 'ltr';
        });
    }
    /**
     * The fill style of the BottomNavigation ([see example]({% slug appearance_bottomnavigation %})).
     *
     * * The possible values are:
     * * (Default) `flat`
     * * `solid`
     */
    set fill(fill) {
        this.renderer.removeClass(this._nativeHostElement, `k-bottom-nav-${this.fill}`);
        this._fill = fill === 'solid' ? 'solid' : 'flat';
        this.renderer.addClass(this._nativeHostElement, `k-bottom-nav-${this._fill}`);
    }
    get fill() {
        return this._fill;
    }
    /**
     * Specifies how the icon and text label are positioned in the BottomNavigation items ([see example]({% slug items_bottomnavigation %}#toc-itemflow)).
     *
     * The possible values are:
     * * (Default) `vertical` - Renders the text below the icon.
     * * `horizontal` - Renders the icon and the text on the same line.
     */
    set itemFlow(itemFlow) {
        this.renderer.removeClass(this._nativeHostElement, `k-bottom-nav-item-flow-${this.itemFlow}`);
        this._itemFlow = itemFlow === 'horizontal' ? 'horizontal' : 'vertical';
        this.renderer.addClass(this._nativeHostElement, `k-bottom-nav-item-flow-${this._itemFlow}`);
    }
    get itemFlow() {
        return this._itemFlow;
    }
    /**
     * Specifies the position and behavior of the BottomNavigation when the page is scrollable ([see example]({% slug positioning_bottomnavigation %})).
     *
     * The possible values are:
     * * (Default) `fixed` - The BottomNavigation always stays at the bottom of the viewport, regardless of the page scroll position.
     * * `sticky` - Positions the BottomNavigation at the end of the scrollable container.
     */
    set positionMode(positionMode) {
        this.renderer.removeClass(this._nativeHostElement, `k-pos-${this.positionMode}`);
        this._positionMode = positionMode === 'sticky' ? 'sticky' : 'fixed';
        this.renderer.addClass(this._nativeHostElement, `k-pos-${this._positionMode}`);
    }
    get positionMode() {
        return this._positionMode;
    }
    /**
     * Specifies the theme color of the BottomNavigation ([see example]({% slug appearance_bottomnavigation %})).
     *
     * * The possible values are:
     * * (Default) `primary` - Applies coloring based on the primary theme color.
     * * `secondary` - Applies coloring based on the secondary theme color.
     * * `tertiary` - Applies coloring based on the tertiary theme color.
     * * `info` - Applies coloring based on the info theme color.
     * * `success` - Applies coloring based on the success theme color.
     * * `warning` - Applies coloring based on the warning theme color.
     * * `error` - Applies coloring based on the error theme color.
     * * `dark` - Applies coloring based on the dark theme color.
     * * `light` - Applies coloring based on the light theme color.
     * * `inverse` - Applies coloring based on the inverted theme color.
     */
    set themeColor(themeColor) {
        const newColor = colors.find(color => color === themeColor);
        if (newColor) {
            this.renderer.removeClass(this._nativeHostElement, `k-bottom-nav-${this._themeColor}`);
            this._themeColor = themeColor;
            this.renderer.addClass(this._nativeHostElement, `k-bottom-nav-${this._themeColor}`);
        }
    }
    get themeColor() {
        return this._themeColor;
    }
    /**
     * @hidden
     */
    get borderClass() {
        return this.border;
    }
    /**
     * @hidden
     */
    get disabledClass() {
        return this.disabled;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.initDomEvents();
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        this.applyClasses();
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
        this.subscriptions.unsubscribe();
    }
    /**
     * @hidden
     */
    selectItem(idx, args) {
        const eventArgs = new BottomNavigationSelectEvent(Object.assign({}, args));
        this.select.emit(eventArgs);
        if (!eventArgs.isDefaultPrevented()) {
            this.selectedIdx = idx;
        }
    }
    applyClasses() {
        this.renderer.addClass(this._nativeHostElement, `k-bottom-nav-${this.fill}`);
        this.renderer.addClass(this._nativeHostElement, `k-bottom-nav-item-flow-${this.itemFlow}`);
        this.renderer.addClass(this._nativeHostElement, `k-pos-${this.positionMode}`);
        this.renderer.addClass(this._nativeHostElement, `k-bottom-nav-${this.themeColor}`);
    }
    initDomEvents() {
        if (!this.hostElement) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.subscriptions.add(this.renderer.listen(this._nativeHostElement, 'click', this.clickHandler.bind(this)));
            this.subscriptions.add(this.renderer.listen(this._nativeHostElement, 'keydown', this.keyDownHandler.bind(this)));
        });
    }
    clickHandler(e) {
        const itemIdx = this.getBottomNavigationItemIndex(e.target);
        const item = this.items[itemIdx];
        if (!item) {
            return;
        }
        if (item.disabled) {
            e.preventDefault();
            return;
        }
        const args = {
            index: itemIdx,
            item: item,
            originalEvent: e,
            sender: this
        };
        this.ngZone.run(() => {
            this.selectItem(itemIdx, args);
            this.changeDetector.markForCheck();
        });
    }
    keyDownHandler(e) {
        const isEnterOrSpace = e.keyCode === Keys.Enter || e.keyCode === Keys.Space;
        if (!isEnterOrSpace) {
            return;
        }
        this.clickHandler(e);
    }
    getBottomNavigationItemIndex(target) {
        const item = closestItem(target, BOTTOMNAVIGATION_ITEM_INDEX, this._nativeHostElement);
        if (item) {
            return itemIndex(item, BOTTOMNAVIGATION_ITEM_INDEX);
        }
    }
};
BottomNavigationComponent.ɵfac = function BottomNavigationComponent_Factory(t) { return new (t || BottomNavigationComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
BottomNavigationComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BottomNavigationComponent, selectors: [["kendo-bottomnavigation"]], contentQueries: function BottomNavigationComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, BottomNavigationItemTemplateDirective, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
    } }, hostVars: 8, hostBindings: function BottomNavigationComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", ctx.role)("dir", ctx.direction);
        ɵngcc0.ɵɵclassProp("k-bottom-nav", ctx.hostClass)("k-bottom-nav-border", ctx.borderClass)("k-state-disabled", ctx.disabledClass);
    } }, inputs: { border: "border", disabled: "disabled", fill: "fill", itemFlow: "itemFlow", positionMode: "positionMode", themeColor: "themeColor", items: "items" }, outputs: { select: "select" }, exportAs: ["kendoBottomNavigation"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.bottomnavigation'
            }
        ])], decls: 1, vars: 1, consts: [[4, "ngIf"], ["kendoBottomNavigationItem", "", "role", "link", "class", "k-bottom-nav-item", 3, "disabledComponent", "item", "index", "selectedIdx", "itemTemplate", "ngClass", "ngStyle", 4, "ngFor", "ngForOf"], ["kendoBottomNavigationItem", "", "role", "link", 1, "k-bottom-nav-item", 3, "disabledComponent", "item", "index", "selectedIdx", "itemTemplate", "ngClass", "ngStyle"]], template: function BottomNavigationComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, BottomNavigationComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.items);
    } }, directives: [ɵngcc2.NgIf, ɵngcc2.NgForOf, ɵngcc3.BottomNavigationItemComponent, ɵngcc2.NgClass, ɵngcc2.NgStyle], encapsulation: 2 });
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], BottomNavigationComponent.prototype, "items", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], BottomNavigationComponent.prototype, "border", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean)
], BottomNavigationComponent.prototype, "disabled", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], BottomNavigationComponent.prototype, "fill", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], BottomNavigationComponent.prototype, "itemFlow", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], BottomNavigationComponent.prototype, "positionMode", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], BottomNavigationComponent.prototype, "themeColor", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], BottomNavigationComponent.prototype, "select", void 0);
tslib_1.__decorate([
    HostBinding('class.k-bottom-nav'),
    tslib_1.__metadata("design:type", Boolean)
], BottomNavigationComponent.prototype, "hostClass", void 0);
tslib_1.__decorate([
    HostBinding('class.k-bottom-nav-border'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], BottomNavigationComponent.prototype, "borderClass", null);
tslib_1.__decorate([
    HostBinding('class.k-state-disabled'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], BottomNavigationComponent.prototype, "disabledClass", null);
tslib_1.__decorate([
    HostBinding('attr.role'),
    tslib_1.__metadata("design:type", String)
], BottomNavigationComponent.prototype, "role", void 0);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String)
], BottomNavigationComponent.prototype, "direction", void 0);
tslib_1.__decorate([
    ContentChild(BottomNavigationItemTemplateDirective, { static: false }),
    tslib_1.__metadata("design:type", BottomNavigationItemTemplateDirective)
], BottomNavigationComponent.prototype, "itemTemplate", void 0);
BottomNavigationComponent = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [LocalizationService,
        ElementRef,
        NgZone,
        ChangeDetectorRef,
        Renderer2])
], BottomNavigationComponent);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BottomNavigationComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoBottomNavigation',
                selector: 'kendo-bottomnavigation',
                providers: [
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.bottomnavigation'
                    }
                ],
                template: `
        <ng-container *ngIf="items">
            <span kendoBottomNavigationItem
                *ngFor="let item of items; let idx=index"
                role="link"
                class="k-bottom-nav-item"
                [disabledComponent]="disabled"
                [item]="item"
                [index]="idx"
                [selectedIdx]="selectedIdx"
                [itemTemplate]="itemTemplate"
                [attr.${BOTTOMNAVIGATION_ITEM_INDEX}]="idx"
                [ngClass]="item.cssClass"
                [ngStyle]="item.cssStyle">
            </span>
        </ng-container>
    `
            }]
    }], function () { return [{ type: ɵngcc1.LocalizationService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.Renderer2 }]; }, { border: [{
            type: Input
        }], disabled: [{
            type: Input
        }], select: [{
            type: Output
        }], hostClass: [{
            type: HostBinding,
            args: ['class.k-bottom-nav']
        }], role: [{
            type: HostBinding,
            args: ['attr.role']
        }], direction: [{
            type: HostBinding,
            args: ['attr.dir']
        }], fill: [{
            type: Input
        }], itemFlow: [{
            type: Input
        }], positionMode: [{
            type: Input
        }], themeColor: [{
            type: Input
        }], borderClass: [{
            type: HostBinding,
            args: ['class.k-bottom-nav-border']
        }], disabledClass: [{
            type: HostBinding,
            args: ['class.k-state-disabled']
        }], items: [{
            type: Input
        }], itemTemplate: [{
            type: ContentChild,
            args: [BottomNavigationItemTemplateDirective, { static: false }]
        }] }); })();
export { BottomNavigationComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,