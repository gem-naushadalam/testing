/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, Output, Input, EventEmitter, TemplateRef, ViewChildren, QueryList, ElementRef, NgZone } from '@angular/core';
import { fromEvent, merge } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { Keys } from '@progress/kendo-angular-common';
import { BREADCRUMB_ITEM_INDEX } from './models/constants';
import { BreadCrumbItemComponent } from './breadcrumb-item.component';
import { closestItem, itemIndex } from '../common/dom-queries';
import { isPresent } from '../common/util';
/**
 * @hidden
 */
let BreadCrumbListComponent = class BreadCrumbListComponent {
    constructor(el, zone) {
        this.el = el;
        this.zone = zone;
        this.items = [];
        this.collapseMode = 'auto';
        this.itemClick = new EventEmitter();
        const element = this.el.nativeElement;
        this.isRootItemContainer = element.classList.contains('k-breadcrumb-root-item-container');
        this.zone.runOutsideAngular(() => {
            const click$ = fromEvent(element, 'click');
            const enterKey$ = fromEvent(element, 'keydown').pipe(filter((ev /* KeyboardEvent causes lint error */) => ev.keyCode === Keys.Enter));
            this.domEventsSubscription = merge(click$, enterKey$)
                .pipe(map((ev) => ev.target), filter(e => !e.classList.contains('k-breadcrumb-delimiter-icon')), // do not trigger handler when a separator is clicked
            map(e => this.getItemIndex(e)), filter(isPresent), map(i => parseInt(i, 10)), map(i => this.items[i]), filter(item => !item.data.disabled && !item.context.isLast), map(item => item.data))
                .subscribe(el => {
                this.zone.run(() => this.itemClick.emit(el));
            });
        });
    }
    ngOnDestroy() {
        this.domEventsSubscription.unsubscribe();
    }
    getItemIndex(target) {
        const item = closestItem(target, BREADCRUMB_ITEM_INDEX, this.el.nativeElement);
        if (item) {
            return itemIndex(item, BREADCRUMB_ITEM_INDEX);
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array)
], BreadCrumbListComponent.prototype, "items", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", TemplateRef)
], BreadCrumbListComponent.prototype, "itemTemplate", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], BreadCrumbListComponent.prototype, "collapseMode", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], BreadCrumbListComponent.prototype, "separatorIcon", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], BreadCrumbListComponent.prototype, "itemClick", void 0);
tslib_1.__decorate([
    ViewChildren(BreadCrumbItemComponent, { static: true }),
    tslib_1.__metadata("design:type", QueryList)
], BreadCrumbListComponent.prototype, "renderedItems", void 0);
BreadCrumbListComponent = tslib_1.__decorate([
    Component({
        selector: '[kendoBreadCrumbList]',
        template: `
        <ng-container *ngFor="let item of items; let i = index; let isFirst = first; let isLast = last">
            <li
                #renderedItem
                kendoBreadCrumbItem
                *ngIf="!(collapseMode === 'wrap' && isFirst) || isRootItemContainer"
                [attr.${BREADCRUMB_ITEM_INDEX}]="i"
                [item]="item"
                [index]="i"
                [collapseMode]="collapseMode"
                [itemTemplate]="itemTemplate"
            >
                <span kendoBreadCrumbSeparator [icon]="separatorIcon" *ngIf="collapseMode === 'wrap' && !isFirst"></span>
                <span
                    kendoBreadCrumbSeparator
                    [icon]="separatorIcon"
                    *ngIf="collapseMode !== 'wrap' && !isLast && !(item?.context.collapsed && items[i + 1]?.context.collapsed)"
                ></span>
            </li>
        </ng-container>
    `
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, NgZone])
], BreadCrumbListComponent);
export { BreadCrumbListComponent };
