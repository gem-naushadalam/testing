/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, HostBinding, Input, ElementRef } from '@angular/core';
import { isPresent } from '../../common/util';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@progress/kendo-angular-l10n';
const DEFAULT_ICON = 'arrow-chevron-right';
const DEFAULT_RTL_ICON = 'arrow-chevron-left';
/**
 * @hidden
 */
let BreadCrumbSeparatorDirective = class BreadCrumbSeparatorDirective {
    constructor(el, localization) {
        this.el = el;
        this.localization = localization;
        this.defaultClasses = true;
        this.ariaHidden = true;
        this.direction = 'ltr';
        this.direction = this.localization.rtl ? 'rtl' : 'ltr';
    }
    set icon(icon) {
        const element = this.el.nativeElement;
        element.classList.remove(`k-i-${this._icon}`);
        if (isPresent(icon)) {
            this._icon = icon;
            this.hasDefaultIcon = false;
        }
        else {
            this._icon = this.direction === 'ltr' ? DEFAULT_ICON : DEFAULT_RTL_ICON;
            this.hasDefaultIcon = true;
        }
        element.classList.add(`k-i-${this._icon}`);
    }
    get icon() {
        return this._icon;
    }
    ngOnInit() {
        this.localizationChangesSubscription = this.localization.changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
            if (this.hasDefaultIcon) {
                this.icon = undefined;
            }
        });
    }
    ngOnDestroy() {
        this.localizationChangesSubscription.unsubscribe();
    }
};
BreadCrumbSeparatorDirective.ɵfac = function BreadCrumbSeparatorDirective_Factory(t) { return new (t || BreadCrumbSeparatorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService)); };
BreadCrumbSeparatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BreadCrumbSeparatorDirective, selectors: [["", "kendoBreadCrumbSeparator", ""]], hostVars: 5, hostBindings: function BreadCrumbSeparatorDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-hidden", ctx.ariaHidden);
        ɵngcc0.ɵɵclassProp("k-breadcrumb-delimiter-icon", ctx.defaultClasses)("k-icon", ctx.defaultClasses);
    } }, inputs: { icon: "icon" } });
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], BreadCrumbSeparatorDirective.prototype, "icon", null);
tslib_1.__decorate([
    HostBinding('class.k-breadcrumb-delimiter-icon'),
    HostBinding('class.k-icon'),
    tslib_1.__metadata("design:type", Boolean)
], BreadCrumbSeparatorDirective.prototype, "defaultClasses", void 0);
tslib_1.__decorate([
    HostBinding('attr.aria-hidden'),
    tslib_1.__metadata("design:type", Boolean)
], BreadCrumbSeparatorDirective.prototype, "ariaHidden", void 0);
BreadCrumbSeparatorDirective = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [ElementRef, LocalizationService])
], BreadCrumbSeparatorDirective);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadCrumbSeparatorDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoBreadCrumbSeparator]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.LocalizationService }]; }, { defaultClasses: [{
            type: HostBinding,
            args: ['class.k-breadcrumb-delimiter-icon']
        }, {
            type: HostBinding,
            args: ['class.k-icon']
        }], ariaHidden: [{
            type: HostBinding,
            args: ['attr.aria-hidden']
        }], icon: [{
            type: Input
        }] }); })();
export { BreadCrumbSeparatorDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VwYXJhdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsic2VwYXJhdG9yLmRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O3FDQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUlHO0FBQ0g7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFpQztBQUNqQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBJbnB1dCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQcmVzZW50IH0gZnJvbSAnLi4vLi4vY29tbW9uL3V0aWwnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xuY29uc3QgREVGQVVMVF9JQ09OID0gJ2Fycm93LWNoZXZyb24tcmlnaHQnO1xuY29uc3QgREVGQVVMVF9SVExfSUNPTiA9ICdhcnJvdy1jaGV2cm9uLWxlZnQnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmxldCBCcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlID0gY2xhc3MgQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IoZWwsIGxvY2FsaXphdGlvbikge1xuICAgICAgICB0aGlzLmVsID0gZWw7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uID0gbG9jYWxpemF0aW9uO1xuICAgICAgICB0aGlzLmRlZmF1bHRDbGFzc2VzID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hcmlhSGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSAnbHRyJztcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB0aGlzLmxvY2FsaXphdGlvbi5ydGwgPyAncnRsJyA6ICdsdHInO1xuICAgIH1cbiAgICBzZXQgaWNvbihpY29uKSB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShgay1pLSR7dGhpcy5faWNvbn1gKTtcbiAgICAgICAgaWYgKGlzUHJlc2VudChpY29uKSkge1xuICAgICAgICAgICAgdGhpcy5faWNvbiA9IGljb247XG4gICAgICAgICAgICB0aGlzLmhhc0RlZmF1bHRJY29uID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pY29uID0gdGhpcy5kaXJlY3Rpb24gPT09ICdsdHInID8gREVGQVVMVF9JQ09OIDogREVGQVVMVF9SVExfSUNPTjtcbiAgICAgICAgICAgIHRoaXMuaGFzRGVmYXVsdEljb24gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChgay1pLSR7dGhpcy5faWNvbn1gKTtcbiAgICB9XG4gICAgZ2V0IGljb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pY29uO1xuICAgIH1cbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgICAgdGhpcy5sb2NhbGl6YXRpb25DaGFuZ2VzU3Vic2NyaXB0aW9uID0gdGhpcy5sb2NhbGl6YXRpb24uY2hhbmdlcy5zdWJzY3JpYmUoKHsgcnRsIH0pID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gcnRsID8gJ3J0bCcgOiAnbHRyJztcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0RlZmF1bHRJY29uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pY29uID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgbmdPbkRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uQ2hhbmdlc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH1cbn07XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIElucHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKSxcbiAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbU3RyaW5nXSlcbl0sIEJyZWFkQ3J1bWJTZXBhcmF0b3JEaXJlY3RpdmUucHJvdG90eXBlLCBcImljb25cIiwgbnVsbCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIEhvc3RCaW5kaW5nKCdjbGFzcy5rLWJyZWFkY3J1bWItZGVsaW1pdGVyLWljb24nKSxcbiAgICBIb3N0QmluZGluZygnY2xhc3Muay1pY29uJyksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcbl0sIEJyZWFkQ3J1bWJTZXBhcmF0b3JEaXJlY3RpdmUucHJvdG90eXBlLCBcImRlZmF1bHRDbGFzc2VzXCIsIHZvaWQgMCk7XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtaGlkZGVuJyksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcbl0sIEJyZWFkQ3J1bWJTZXBhcmF0b3JEaXJlY3RpdmUucHJvdG90eXBlLCBcImFyaWFIaWRkZW5cIiwgdm9pZCAwKTtcbkJyZWFkQ3J1bWJTZXBhcmF0b3JEaXJlY3RpdmUgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIERpcmVjdGl2ZSh7XG4gICAgICAgIHNlbGVjdG9yOiAnW2tlbmRvQnJlYWRDcnVtYlNlcGFyYXRvcl0nXG4gICAgfSksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW0VsZW1lbnRSZWYsIExvY2FsaXphdGlvblNlcnZpY2VdKVxuXSwgQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZSk7XG5leHBvcnQgeyBCcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlIH07XG4iXX0=