/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, HostBinding, Input, ElementRef } from '@angular/core';
import { isPresent } from '../../common/util';
import { LocalizationService } from '@progress/kendo-angular-l10n';
const DEFAULT_ICON = 'arrow-chevron-right';
const DEFAULT_RTL_ICON = 'arrow-chevron-left';
/**
 * @hidden
 */
let BreadCrumbSeparatorDirective = class BreadCrumbSeparatorDirective {
    constructor(el, localization) {
        this.el = el;
        this.localization = localization;
        this.defaultClasses = true;
        this.ariaHidden = true;
        this.direction = 'ltr';
        this.direction = this.localization.rtl ? 'rtl' : 'ltr';
    }
    set icon(icon) {
        const element = this.el.nativeElement;
        element.classList.remove(`k-i-${this._icon}`);
        if (isPresent(icon)) {
            this._icon = icon;
            this.hasDefaultIcon = false;
        }
        else {
            this._icon = this.direction === 'ltr' ? DEFAULT_ICON : DEFAULT_RTL_ICON;
            this.hasDefaultIcon = true;
        }
        element.classList.add(`k-i-${this._icon}`);
    }
    get icon() {
        return this._icon;
    }
    ngOnInit() {
        this.localizationChangesSubscription = this.localization.changes.subscribe(({ rtl }) => {
            this.direction = rtl ? 'rtl' : 'ltr';
            if (this.hasDefaultIcon) {
                this.icon = undefined;
            }
        });
    }
    ngOnDestroy() {
        this.localizationChangesSubscription.unsubscribe();
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], BreadCrumbSeparatorDirective.prototype, "icon", null);
tslib_1.__decorate([
    HostBinding('class.k-breadcrumb-delimiter-icon'),
    HostBinding('class.k-icon'),
    tslib_1.__metadata("design:type", Boolean)
], BreadCrumbSeparatorDirective.prototype, "defaultClasses", void 0);
tslib_1.__decorate([
    HostBinding('attr.aria-hidden'),
    tslib_1.__metadata("design:type", Boolean)
], BreadCrumbSeparatorDirective.prototype, "ariaHidden", void 0);
BreadCrumbSeparatorDirective = tslib_1.__decorate([
    Directive({
        selector: '[kendoBreadCrumbSeparator]'
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, LocalizationService])
], BreadCrumbSeparatorDirective);
export { BreadCrumbSeparatorDirective };
