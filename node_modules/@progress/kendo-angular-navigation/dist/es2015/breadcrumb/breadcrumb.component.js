/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, ContentChild, Input, Output, EventEmitter, ViewChild, HostBinding, ElementRef, ChangeDetectorRef, NgZone, ViewChildren, QueryList, isDevMode } from '@angular/core';
import { Subscription, ReplaySubject, merge, Subject } from 'rxjs';
import { filter, map, share, startWith } from 'rxjs/operators';
import { ResizeSensorComponent, isDocumentAvailable } from '@progress/kendo-angular-common';
import { validatePackage } from '@progress/kendo-licensing';
import { packageMetadata } from '../package-metadata';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { BreadCrumbItemTemplateDirective } from './template-directives/item-template.directive';
import { outerWidth } from '../common/util';
import { BreadCrumbListComponent } from './list.component';
import { collapsed, expanded, collapseFirst, expandFirst } from './util';
/**
 * Represents the [Kendo UI Breadcrumb component for Angular]({% slug overview_breadcrumb %}).
 *
 * @example
 * ```ts-no-run
 * _@Component({
 *      selector: 'my-app',
 *      template: `
 *          <kendo-breadcrumb
 *              [items]="items"
 *              (itemClick)="onItemClick($event)">
 *          </kendo-breadcrumb>
 *      `
 * })
 * class AppComponent {
 *      public items: BreadCrumbItem[] = [
 *          { text: 'Home', title: 'Home', icon: 'home' },
 *          { text: 'Kids', title: 'Kids' },
 *          { text: '8y-16y', title: '8y-16y', disabled: true },
 *          { text: 'New collection', title: 'New collection' },
 *          { text: 'Jeans', title: 'Jeans' }
 *      ];
 *
 *      public onItemClick(item: BreadCrumbItem): void {
 *          console.log(item);
 *      }
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@progress/kendo-angular-l10n';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from './list.component';
import * as ɵngcc4 from '@progress/kendo-angular-common';

const _c0 = ["resizeSensor"];
const _c1 = ["itemsContainer"];
function BreadCrumbComponent_ol_0_Template(rf, ctx) { if (rf & 1) {
    const _r5 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "ol", 5, 2);
    ɵngcc0.ɵɵlistener("itemClick", function BreadCrumbComponent_ol_0_Template_ol_itemClick_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r5); const ctx_r4 = ɵngcc0.ɵɵnextContext(); return ctx_r4.itemClick.emit($event); });
    ɵngcc0.ɵɵpipe(2, "async");
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(2, 4, ctx_r0.firstItem$))("itemTemplate", ctx_r0.itemTemplate == null ? null : ctx_r0.itemTemplate.templateRef)("collapseMode", ctx_r0.collapseMode)("separatorIcon", ctx_r0.separatorIcon);
} }
const _c2 = function (a0, a1) { return { "k-flex-wrap": a0, "k-flex-none": a1 }; };
let BreadCrumbComponent = class BreadCrumbComponent {
    constructor(el, cdr, zone, localization) {
        this.el = el;
        this.cdr = cdr;
        this.zone = zone;
        this.localization = localization;
        /**
         * Fires when a Breadcrumb item is clicked. The event will not be fired by disabled items and the last item.
         */
        this.itemClick = new EventEmitter();
        this.hostClasses = true;
        this._items = [];
        this._collapseMode = 'auto';
        this.updateItems = new ReplaySubject();
        this.afterViewInit = new Subject();
        this.subscriptions = new Subscription();
        this.direction = 'ltr';
        validatePackage(packageMetadata);
        const updateItems$ = this.updateItems.asObservable().pipe(startWith([]));
        this.direction = localization.rtl ? 'rtl' : 'ltr';
        this.itemsData$ = updateItems$.pipe(map(items => items.filter(Boolean)), map(items => items.map((item, index, collection) => ({
            context: {
                collapsed: false,
                isLast: index === collection.length - 1,
                isFirst: index === 0
            },
            data: item
        }))), share());
        this.firstItem$ = updateItems$.pipe(map(items => {
            if (items.length > 0) {
                return [
                    {
                        context: {
                            collapsed: false,
                            isLast: items.length === 1,
                            isFirst: true
                        },
                        data: items[0]
                    }
                ];
            }
            return [];
        }), share());
    }
    /**
     * The collection of items that will be rendered in the Breadcrumb.
     */
    set items(items) {
        this._items = items || [];
        this.updateItems.next(this._items);
    }
    get items() {
        return this._items;
    }
    /**
     * Specifies the collapse mode of the Breadcrumb ([see example]({% slug collapse_modes_breadcrumb %})).
     *
     * The possible values are:
     * - `auto` (default)&mdash;items are automatically collapsed based on the width of the Breadcrumb.
     * - `wrap`&mdash;items are wrapped on multiple rows.
     * - `none`&mdash;all items are expanded on the same row.
     *
     * For more information and example refer to the [Collapse Modes]({% slug collapse_modes_breadcrumb %}) article.
     */
    set collapseMode(mode) {
        if (isDevMode() && ['auto', 'wrap', 'none'].indexOf(mode) < 0) {
            throw new Error('Invalid collapse mode. Allowed values are "auto", "wrap" or "none". \nFor more details see https://www.telerik.com/kendo-angular-ui/components/navigation/api/BreadCrumbCollapseMode/');
        }
        this._collapseMode = mode || 'auto';
        this.updateItems.next(this.items);
    }
    get collapseMode() {
        return this._collapseMode;
    }
    get wrapMode() {
        return this.collapseMode === 'wrap';
    }
    get getDir() {
        return this.direction;
    }
    ngOnInit() {
        this.subscriptions.add(this.localization.changes.subscribe(({ rtl }) => (this.direction = rtl ? 'rtl' : 'ltr')));
    }
    ngAfterViewInit() {
        this.attachResizeHandler();
        this.afterViewInit.next();
    }
    ngOnDestroy() {
        this.subscriptions.unsubscribe();
    }
    handleResize() {
        const autoCollapseCandidates = [
            ...this.listComponent.renderedItems.toArray().filter(ri => !ri.item.context.isFirst && !ri.item.context.isLast)
        ];
        const componentWidth = outerWidth(this.el.nativeElement);
        const itemsContainerWidth = Math.floor(this.itemsContainers
            .toArray()
            .map(el => outerWidth(el.nativeElement))
            .reduce((acc, curr) => acc + curr, 0));
        const nextExpandWidth = ([...autoCollapseCandidates].reverse().find(collapsed) || { width: 0 }).width;
        // // shrink
        if (componentWidth <= itemsContainerWidth && autoCollapseCandidates.find(expanded)) {
            collapseFirst(autoCollapseCandidates);
            // needed by resize sensor
            this.cdr.detectChanges();
            return this.handleResize();
        }
        // expand
        if (componentWidth > itemsContainerWidth + nextExpandWidth && autoCollapseCandidates.find(collapsed)) {
            expandFirst([...autoCollapseCandidates].reverse());
            // needed by resize sensor
            this.cdr.detectChanges();
            return this.handleResize();
        }
    }
    shouldResize() {
        return isDocumentAvailable() && this.collapseMode === 'auto';
    }
    attachResizeHandler() {
        // resize when:
        // the component is initialized
        // the container is resized
        // items are added/removed
        this.subscriptions.add(merge(this.resizeSensor.resize, this.itemsData$, this.afterViewInit.asObservable())
            .pipe(filter(() => this.shouldResize()))
            .subscribe(() => {
            this.zone.runOutsideAngular(() => setTimeout(() => {
                this.zone.run(() => {
                    if (this.listComponent) {
                        this.handleResize();
                        this.resizeSensor.acceptSize();
                    }
                });
            }));
        }));
    }
};
BreadCrumbComponent.ɵfac = function BreadCrumbComponent_Factory(t) { return new (t || BreadCrumbComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService)); };
BreadCrumbComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BreadCrumbComponent, selectors: [["kendo-breadcrumb"]], contentQueries: function BreadCrumbComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, BreadCrumbItemTemplateDirective, 3);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemTemplate = _t.first);
    } }, viewQuery: function BreadCrumbComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 3);
        ɵngcc0.ɵɵviewQuery(BreadCrumbListComponent, 3);
        ɵngcc0.ɵɵviewQuery(_c1, 1, ElementRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.resizeSensor = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.listComponent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.itemsContainers = _t);
    } }, hostVars: 7, hostBindings: function BreadCrumbComponent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("dir", ctx.getDir);
        ɵngcc0.ɵɵclassProp("k-widget", ctx.hostClasses)("k-breadcrumb", ctx.hostClasses)("k-breadcrumb-wrap", ctx.wrapMode);
    } }, inputs: { items: "items", collapseMode: "collapseMode", separatorIcon: "separatorIcon" }, outputs: { itemClick: "itemClick" }, exportAs: ["kendoBreadCrumb"], features: [ɵngcc0.ɵɵProvidersFeature([
            LocalizationService,
            {
                provide: L10N_PREFIX,
                useValue: 'kendo.breadcrumb'
            }
        ])], decls: 6, vars: 12, consts: [["kendoBreadCrumbList", "", "class", "k-breadcrumb-root-item-container", 3, "items", "itemTemplate", "collapseMode", "separatorIcon", "itemClick", 4, "ngIf"], ["kendoBreadCrumbList", "", 1, "k-breadcrumb-container", 3, "items", "itemTemplate", "collapseMode", "separatorIcon", "ngClass", "itemClick"], ["itemsContainer", ""], [3, "rateLimit"], ["resizeSensor", ""], ["kendoBreadCrumbList", "", 1, "k-breadcrumb-root-item-container", 3, "items", "itemTemplate", "collapseMode", "separatorIcon", "itemClick"]], template: function BreadCrumbComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, BreadCrumbComponent_ol_0_Template, 3, 6, "ol", 0);
        ɵngcc0.ɵɵelementStart(1, "ol", 1, 2);
        ɵngcc0.ɵɵlistener("itemClick", function BreadCrumbComponent_Template_ol_itemClick_1_listener($event) { return ctx.itemClick.emit($event); });
        ɵngcc0.ɵɵpipe(3, "async");
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "kendo-resize-sensor", 3, 4);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.collapseMode === "wrap");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("items", ɵngcc0.ɵɵpipeBind1(3, 7, ctx.itemsData$))("itemTemplate", ctx.itemTemplate == null ? null : ctx.itemTemplate.templateRef)("collapseMode", ctx.collapseMode)("separatorIcon", ctx.separatorIcon)("ngClass", ɵngcc0.ɵɵpureFunction2(9, _c2, ctx.collapseMode === "wrap", ctx.collapseMode === "none"));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("rateLimit", 1000);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.BreadCrumbListComponent, ɵngcc2.NgClass, ɵngcc4.ResizeSensorComponent], pipes: [ɵngcc2.AsyncPipe], encapsulation: 2 });
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], BreadCrumbComponent.prototype, "items", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], BreadCrumbComponent.prototype, "separatorIcon", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], BreadCrumbComponent.prototype, "collapseMode", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], BreadCrumbComponent.prototype, "itemClick", void 0);
tslib_1.__decorate([
    ViewChild('resizeSensor', { static: true }),
    tslib_1.__metadata("design:type", ResizeSensorComponent)
], BreadCrumbComponent.prototype, "resizeSensor", void 0);
tslib_1.__decorate([
    ViewChildren('itemsContainer', { read: ElementRef }),
    tslib_1.__metadata("design:type", QueryList)
], BreadCrumbComponent.prototype, "itemsContainers", void 0);
tslib_1.__decorate([
    ViewChild(BreadCrumbListComponent, { static: true }),
    tslib_1.__metadata("design:type", BreadCrumbListComponent)
], BreadCrumbComponent.prototype, "listComponent", void 0);
tslib_1.__decorate([
    ContentChild(BreadCrumbItemTemplateDirective, { static: true }),
    tslib_1.__metadata("design:type", BreadCrumbItemTemplateDirective)
], BreadCrumbComponent.prototype, "itemTemplate", void 0);
tslib_1.__decorate([
    HostBinding('class.k-widget'),
    HostBinding('class.k-breadcrumb'),
    tslib_1.__metadata("design:type", Boolean)
], BreadCrumbComponent.prototype, "hostClasses", void 0);
tslib_1.__decorate([
    HostBinding('class.k-breadcrumb-wrap'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [])
], BreadCrumbComponent.prototype, "wrapMode", null);
tslib_1.__decorate([
    HostBinding('attr.dir'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [])
], BreadCrumbComponent.prototype, "getDir", null);
BreadCrumbComponent = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [ElementRef,
        ChangeDetectorRef,
        NgZone,
        LocalizationService])
], BreadCrumbComponent);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadCrumbComponent, [{
        type: Component,
        args: [{
                exportAs: 'kendoBreadCrumb',
                selector: 'kendo-breadcrumb',
                providers: [
                    LocalizationService,
                    {
                        provide: L10N_PREFIX,
                        useValue: 'kendo.breadcrumb'
                    }
                ],
                template: `
        <ol
            #itemsContainer
            kendoBreadCrumbList
            class="k-breadcrumb-root-item-container"
            *ngIf="collapseMode === 'wrap'"
            [items]="firstItem$ | async"
            [itemTemplate]="itemTemplate?.templateRef"
            [collapseMode]="collapseMode"
            [separatorIcon]="separatorIcon"
            (itemClick)="itemClick.emit($event)"
        ></ol>
        <ol
            #itemsContainer
            kendoBreadCrumbList
            class="k-breadcrumb-container"
            [items]="itemsData$ | async"
            [itemTemplate]="itemTemplate?.templateRef"
            [collapseMode]="collapseMode"
            [separatorIcon]="separatorIcon"
            (itemClick)="itemClick.emit($event)"
            [ngClass]="{ 'k-flex-wrap': collapseMode === 'wrap', 'k-flex-none': collapseMode === 'none' }"
        ></ol>
        <kendo-resize-sensor [rateLimit]="1000" #resizeSensor></kendo-resize-sensor>
    `
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.LocalizationService }]; }, { itemClick: [{
            type: Output
        }], hostClasses: [{
            type: HostBinding,
            args: ['class.k-widget']
        }, {
            type: HostBinding,
            args: ['class.k-breadcrumb']
        }], items: [{
            type: Input
        }], collapseMode: [{
            type: Input
        }], wrapMode: [{
            type: HostBinding,
            args: ['class.k-breadcrumb-wrap']
        }], getDir: [{
            type: HostBinding,
            args: ['attr.dir']
        }], separatorIcon: [{
            type: Input
        }], resizeSensor: [{
            type: ViewChild,
            args: ['resizeSensor', { static: true }]
        }], itemsContainers: [{
            type: ViewChildren,
            args: ['itemsContainer', { read: ElementRef }]
        }], listComponent: [{
            type: ViewChild,
            args: [BreadCrumbListComponent, { static: true }]
        }], itemTemplate: [{
            type: ContentChild,
            args: [BreadCrumbItemTemplateDirective, { static: true }]
        }] }); })();
export { BreadCrumbComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,