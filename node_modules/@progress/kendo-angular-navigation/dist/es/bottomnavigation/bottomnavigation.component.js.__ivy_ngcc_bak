/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { BottomNavigationSelectEvent } from './events/select-event';
import { Component, HostBinding, Input, Output, EventEmitter, ElementRef, Renderer2, ContentChild, NgZone, ChangeDetectorRef } from '@angular/core';
import { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';
import { Subscription } from 'rxjs';
import { Keys } from '@progress/kendo-angular-common';
import { BottomNavigationItemTemplateDirective } from './templates/item-template.directive';
import { closestItem, itemIndex } from '../common/dom-queries';
import { BOTTOMNAVIGATION_ITEM_INDEX, colors } from './constants';
/**
 * Represents the [Kendo UI BottomNavigation component for Angular]({% slug overview_bottomnavigation %}).
 *
 * @example
 * ```ts-no-run
 * _@Component({
 *      selector: 'my-app',
 *      template: `
 *          <kendo-bottomnavigation [items]="items"></kendo-bottomnavigation>
 *      `
 * })
 * class AppComponent {
 *      public items: Array<any> = [
 *          { text: 'Inbox', icon: 'email', selected: true },
 *          { text: 'Calendar', icon: 'calendar'},
 *          { text: 'Profile', icon: 'user'}
 *      ]
 * }
 * ```
 */
var BottomNavigationComponent = /** @class */ (function () {
    function BottomNavigationComponent(localization, hostElement, ngZone, changeDetector, renderer) {
        var _this = this;
        this.localization = localization;
        this.hostElement = hostElement;
        this.ngZone = ngZone;
        this.changeDetector = changeDetector;
        this.renderer = renderer;
        /**
         * Sets a top border to the BottomNavigation ([see example]({% slug appearance_bottomnavigation %})).
         *
         * @default false
         */
        this.border = false;
        /**
         * Disables the whole BottomNavigation.
         *
         * @default false
         */
        this.disabled = false;
        /**
         * Fires each time an item is selected. This event is preventable.
         */
        this.select = new EventEmitter();
        /**
         * @hidden
         */
        this.hostClass = true;
        /**
         * @hidden
         */
        this.role = 'navigation';
        this._fill = 'flat';
        this._itemFlow = 'vertical';
        this._positionMode = 'fixed';
        this._themeColor = 'primary';
        this._nativeHostElement = this.hostElement.nativeElement;
        this.subscriptions = new Subscription();
        this.rtl = false;
        this.dynamicRTLSubscription = this.localization.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.rtl = rtl;
            _this.direction = _this.rtl ? 'rtl' : 'ltr';
        });
    }
    Object.defineProperty(BottomNavigationComponent.prototype, "fill", {
        get: function () {
            return this._fill;
        },
        /**
         * The fill style of the BottomNavigation ([see example]({% slug appearance_bottomnavigation %})).
         *
         * * The possible values are:
         * * (Default) `flat`
         * * `solid`
         */
        set: function (fill) {
            this.renderer.removeClass(this._nativeHostElement, "k-bottom-nav-" + this.fill);
            this._fill = fill === 'solid' ? 'solid' : 'flat';
            this.renderer.addClass(this._nativeHostElement, "k-bottom-nav-" + this._fill);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BottomNavigationComponent.prototype, "itemFlow", {
        get: function () {
            return this._itemFlow;
        },
        /**
         * Specifies how the icon and text label are positioned in the BottomNavigation items ([see example]({% slug items_bottomnavigation %}#toc-itemflow)).
         *
         * The possible values are:
         * * (Default) `vertical` - Renders the text below the icon.
         * * `horizontal` - Renders the icon and the text on the same line.
         */
        set: function (itemFlow) {
            this.renderer.removeClass(this._nativeHostElement, "k-bottom-nav-item-flow-" + this.itemFlow);
            this._itemFlow = itemFlow === 'horizontal' ? 'horizontal' : 'vertical';
            this.renderer.addClass(this._nativeHostElement, "k-bottom-nav-item-flow-" + this._itemFlow);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BottomNavigationComponent.prototype, "positionMode", {
        get: function () {
            return this._positionMode;
        },
        /**
         * Specifies the position and behavior of the BottomNavigation when the page is scrollable ([see example]({% slug positioning_bottomnavigation %})).
         *
         * The possible values are:
         * * (Default) `fixed` - The BottomNavigation always stays at the bottom of the viewport, regardless of the page scroll position.
         * * `sticky` - Positions the BottomNavigation at the end of the scrollable container.
         */
        set: function (positionMode) {
            this.renderer.removeClass(this._nativeHostElement, "k-pos-" + this.positionMode);
            this._positionMode = positionMode === 'sticky' ? 'sticky' : 'fixed';
            this.renderer.addClass(this._nativeHostElement, "k-pos-" + this._positionMode);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BottomNavigationComponent.prototype, "themeColor", {
        get: function () {
            return this._themeColor;
        },
        /**
         * Specifies the theme color of the BottomNavigation ([see example]({% slug appearance_bottomnavigation %})).
         *
         * * The possible values are:
         * * (Default) `primary` - Applies coloring based on the primary theme color.
         * * `secondary` - Applies coloring based on the secondary theme color.
         * * `tertiary` - Applies coloring based on the tertiary theme color.
         * * `info` - Applies coloring based on the info theme color.
         * * `success` - Applies coloring based on the success theme color.
         * * `warning` - Applies coloring based on the warning theme color.
         * * `error` - Applies coloring based on the error theme color.
         * * `dark` - Applies coloring based on the dark theme color.
         * * `light` - Applies coloring based on the light theme color.
         * * `inverse` - Applies coloring based on the inverted theme color.
         */
        set: function (themeColor) {
            var newColor = colors.find(function (color) { return color === themeColor; });
            if (newColor) {
                this.renderer.removeClass(this._nativeHostElement, "k-bottom-nav-" + this._themeColor);
                this._themeColor = themeColor;
                this.renderer.addClass(this._nativeHostElement, "k-bottom-nav-" + this._themeColor);
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BottomNavigationComponent.prototype, "borderClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.border;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BottomNavigationComponent.prototype, "disabledClass", {
        /**
         * @hidden
         */
        get: function () {
            return this.disabled;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    BottomNavigationComponent.prototype.ngOnInit = function () {
        this.initDomEvents();
    };
    /**
     * @hidden
     */
    BottomNavigationComponent.prototype.ngAfterViewInit = function () {
        this.applyClasses();
    };
    /**
     * @hidden
     */
    BottomNavigationComponent.prototype.ngOnDestroy = function () {
        if (this.dynamicRTLSubscription) {
            this.dynamicRTLSubscription.unsubscribe();
        }
        this.subscriptions.unsubscribe();
    };
    /**
     * @hidden
     */
    BottomNavigationComponent.prototype.selectItem = function (idx, args) {
        var eventArgs = new BottomNavigationSelectEvent(tslib_1.__assign({}, args));
        this.select.emit(eventArgs);
        if (!eventArgs.isDefaultPrevented()) {
            this.selectedIdx = idx;
        }
    };
    BottomNavigationComponent.prototype.applyClasses = function () {
        this.renderer.addClass(this._nativeHostElement, "k-bottom-nav-" + this.fill);
        this.renderer.addClass(this._nativeHostElement, "k-bottom-nav-item-flow-" + this.itemFlow);
        this.renderer.addClass(this._nativeHostElement, "k-pos-" + this.positionMode);
        this.renderer.addClass(this._nativeHostElement, "k-bottom-nav-" + this.themeColor);
    };
    BottomNavigationComponent.prototype.initDomEvents = function () {
        var _this = this;
        if (!this.hostElement) {
            return;
        }
        this.ngZone.runOutsideAngular(function () {
            _this.subscriptions.add(_this.renderer.listen(_this._nativeHostElement, 'click', _this.clickHandler.bind(_this)));
            _this.subscriptions.add(_this.renderer.listen(_this._nativeHostElement, 'keydown', _this.keyDownHandler.bind(_this)));
        });
    };
    BottomNavigationComponent.prototype.clickHandler = function (e) {
        var _this = this;
        var itemIdx = this.getBottomNavigationItemIndex(e.target);
        var item = this.items[itemIdx];
        if (!item) {
            return;
        }
        if (item.disabled) {
            e.preventDefault();
            return;
        }
        var args = {
            index: itemIdx,
            item: item,
            originalEvent: e,
            sender: this
        };
        this.ngZone.run(function () {
            _this.selectItem(itemIdx, args);
            _this.changeDetector.markForCheck();
        });
    };
    BottomNavigationComponent.prototype.keyDownHandler = function (e) {
        var isEnterOrSpace = e.keyCode === Keys.Enter || e.keyCode === Keys.Space;
        if (!isEnterOrSpace) {
            return;
        }
        this.clickHandler(e);
    };
    BottomNavigationComponent.prototype.getBottomNavigationItemIndex = function (target) {
        var item = closestItem(target, BOTTOMNAVIGATION_ITEM_INDEX, this._nativeHostElement);
        if (item) {
            return itemIndex(item, BOTTOMNAVIGATION_ITEM_INDEX);
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], BottomNavigationComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], BottomNavigationComponent.prototype, "border", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Boolean)
    ], BottomNavigationComponent.prototype, "disabled", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], BottomNavigationComponent.prototype, "fill", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], BottomNavigationComponent.prototype, "itemFlow", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], BottomNavigationComponent.prototype, "positionMode", null);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], BottomNavigationComponent.prototype, "themeColor", null);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], BottomNavigationComponent.prototype, "select", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-bottom-nav'),
        tslib_1.__metadata("design:type", Boolean)
    ], BottomNavigationComponent.prototype, "hostClass", void 0);
    tslib_1.__decorate([
        HostBinding('class.k-bottom-nav-border'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], BottomNavigationComponent.prototype, "borderClass", null);
    tslib_1.__decorate([
        HostBinding('class.k-state-disabled'),
        tslib_1.__metadata("design:type", Boolean),
        tslib_1.__metadata("design:paramtypes", [])
    ], BottomNavigationComponent.prototype, "disabledClass", null);
    tslib_1.__decorate([
        HostBinding('attr.role'),
        tslib_1.__metadata("design:type", String)
    ], BottomNavigationComponent.prototype, "role", void 0);
    tslib_1.__decorate([
        HostBinding('attr.dir'),
        tslib_1.__metadata("design:type", String)
    ], BottomNavigationComponent.prototype, "direction", void 0);
    tslib_1.__decorate([
        ContentChild(BottomNavigationItemTemplateDirective, { static: false }),
        tslib_1.__metadata("design:type", BottomNavigationItemTemplateDirective)
    ], BottomNavigationComponent.prototype, "itemTemplate", void 0);
    BottomNavigationComponent = tslib_1.__decorate([
        Component({
            exportAs: 'kendoBottomNavigation',
            selector: 'kendo-bottomnavigation',
            providers: [
                LocalizationService,
                {
                    provide: L10N_PREFIX,
                    useValue: 'kendo.bottomnavigation'
                }
            ],
            template: "\n        <ng-container *ngIf=\"items\">\n            <span kendoBottomNavigationItem\n                *ngFor=\"let item of items; let idx=index\"\n                role=\"link\"\n                class=\"k-bottom-nav-item\"\n                [disabledComponent]=\"disabled\"\n                [item]=\"item\"\n                [index]=\"idx\"\n                [selectedIdx]=\"selectedIdx\"\n                [itemTemplate]=\"itemTemplate\"\n                [attr." + BOTTOMNAVIGATION_ITEM_INDEX + "]=\"idx\"\n                [ngClass]=\"item.cssClass\"\n                [ngStyle]=\"item.cssStyle\">\n            </span>\n        </ng-container>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [LocalizationService,
            ElementRef,
            NgZone,
            ChangeDetectorRef,
            Renderer2])
    ], BottomNavigationComponent);
    return BottomNavigationComponent;
}());
export { BottomNavigationComponent };
