/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ResizeSensorModule } from '@progress/kendo-angular-common';
import { BreadCrumbComponent } from './breadcrumb/breadcrumb.component';
import { BreadCrumbItemComponent } from './breadcrumb/breadcrumb-item.component';
import { BreadCrumbItemTemplateDirective } from './breadcrumb/template-directives/item-template.directive';
import { BreadCrumbSeparatorDirective } from './breadcrumb/template-directives/separator.directive';
import { BreadCrumbListComponent } from './breadcrumb/list.component';
import * as ɵngcc0 from '@angular/core';
var templateDirectives = [
    BreadCrumbItemTemplateDirective
];
var exportedModules = [
    BreadCrumbComponent,
    BreadCrumbItemComponent,
    BreadCrumbListComponent
].concat(templateDirectives);
var declarations = exportedModules.concat([
    BreadCrumbSeparatorDirective
]);
/**
 * Represents the [NgModule]({{ site.data.urls.angular['ngmoduleapi'] }})
 * definition for the BreadCrumb component.
 * @example
 *
 * ```ts-no-run
 * // Import the BreadCrumb module
 * import { BreadCrumbModule } from '@progress/kendo-angular-navigation';
 *
 * // The browser platform with a compiler
 * import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';
 * import { BrowserModule } from '@angular/platform-browser';
 *
 * import { NgModule } from '@angular/core';
 *
 * // Import the app component
 * import { AppComponent } from './app.component';
 *
 * // Define the app module
 * _@NgModule({
 *     declarations: [AppComponent], // declare app component
 *     imports:      [BrowserModule, BreadCrumbModule], // import BreadCrumb module
 *     bootstrap:    [AppComponent]
 * })
 * export class AppModule {}
 *
 * // Compile and launch the module
 * platformBrowserDynamic().bootstrapModule(AppModule);
 *
 * ```
 */
var BreadCrumbModule = /** @class */ (function () {
    function BreadCrumbModule() {
    }
BreadCrumbModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: BreadCrumbModule });
BreadCrumbModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function BreadCrumbModule_Factory(t) { return new (t || BreadCrumbModule)(); }, imports: [[CommonModule, ResizeSensorModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(BreadCrumbModule, { declarations: function () { return [BreadCrumbComponent,
        BreadCrumbItemComponent,
        BreadCrumbListComponent, BreadCrumbItemTemplateDirective, BreadCrumbSeparatorDirective]; }, imports: function () { return [CommonModule, ResizeSensorModule]; }, exports: function () { return [BreadCrumbComponent,
        BreadCrumbItemComponent,
        BreadCrumbListComponent, BreadCrumbItemTemplateDirective]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadCrumbModule, [{
        type: NgModule,
        args: [{
                declarations: [declarations],
                exports: [exportedModules],
                imports: [CommonModule, ResizeSensorModule]
            }]
    }], function () { return []; }, null); })();
    return BreadCrumbModule;
}());
export { BreadCrumbModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWRjcnVtYi5tb2R1bGUuanMiLCJzb3VyY2VzIjpbImJyZWFkY3J1bWIubW9kdWxlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O2dEQU95QjtBQUN6QjtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBSZXNpemVTZW5zb3JNb2R1bGUgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1jb21tb24nO1xuaW1wb3J0IHsgQnJlYWRDcnVtYkNvbXBvbmVudCB9IGZyb20gJy4vYnJlYWRjcnVtYi9icmVhZGNydW1iLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCcmVhZENydW1iSXRlbUNvbXBvbmVudCB9IGZyb20gJy4vYnJlYWRjcnVtYi9icmVhZGNydW1iLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IEJyZWFkQ3J1bWJJdGVtVGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL2JyZWFkY3J1bWIvdGVtcGxhdGUtZGlyZWN0aXZlcy9pdGVtLXRlbXBsYXRlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBCcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlIH0gZnJvbSAnLi9icmVhZGNydW1iL3RlbXBsYXRlLWRpcmVjdGl2ZXMvc2VwYXJhdG9yLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBCcmVhZENydW1iTGlzdENvbXBvbmVudCB9IGZyb20gJy4vYnJlYWRjcnVtYi9saXN0LmNvbXBvbmVudCc7XG52YXIgdGVtcGxhdGVEaXJlY3RpdmVzID0gW1xuICAgIEJyZWFkQ3J1bWJJdGVtVGVtcGxhdGVEaXJlY3RpdmVcbl07XG52YXIgZXhwb3J0ZWRNb2R1bGVzID0gW1xuICAgIEJyZWFkQ3J1bWJDb21wb25lbnQsXG4gICAgQnJlYWRDcnVtYkl0ZW1Db21wb25lbnQsXG4gICAgQnJlYWRDcnVtYkxpc3RDb21wb25lbnRcbl0uY29uY2F0KHRlbXBsYXRlRGlyZWN0aXZlcyk7XG52YXIgZGVjbGFyYXRpb25zID0gZXhwb3J0ZWRNb2R1bGVzLmNvbmNhdChbXG4gICAgQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZVxuXSk7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIFtOZ01vZHVsZV0oe3sgc2l0ZS5kYXRhLnVybHMuYW5ndWxhclsnbmdtb2R1bGVhcGknXSB9fSlcbiAqIGRlZmluaXRpb24gZm9yIHRoZSBCcmVhZENydW1iIGNvbXBvbmVudC5cbiAqIEBleGFtcGxlXG4gKlxuICogYGBgdHMtbm8tcnVuXG4gKiAvLyBJbXBvcnQgdGhlIEJyZWFkQ3J1bWIgbW9kdWxlXG4gKiBpbXBvcnQgeyBCcmVhZENydW1iTW9kdWxlIH0gZnJvbSAnQHByb2dyZXNzL2tlbmRvLWFuZ3VsYXItbmF2aWdhdGlvbic7XG4gKlxuICogLy8gVGhlIGJyb3dzZXIgcGxhdGZvcm0gd2l0aCBhIGNvbXBpbGVyXG4gKiBpbXBvcnQgeyBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljJztcbiAqIGltcG9ydCB7IEJyb3dzZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbiAqXG4gKiBpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuICpcbiAqIC8vIEltcG9ydCB0aGUgYXBwIGNvbXBvbmVudFxuICogaW1wb3J0IHsgQXBwQ29tcG9uZW50IH0gZnJvbSAnLi9hcHAuY29tcG9uZW50JztcbiAqXG4gKiAvLyBEZWZpbmUgdGhlIGFwcCBtb2R1bGVcbiAqIF9ATmdNb2R1bGUoe1xuICogICAgIGRlY2xhcmF0aW9uczogW0FwcENvbXBvbmVudF0sIC8vIGRlY2xhcmUgYXBwIGNvbXBvbmVudFxuICogICAgIGltcG9ydHM6ICAgICAgW0Jyb3dzZXJNb2R1bGUsIEJyZWFkQ3J1bWJNb2R1bGVdLCAvLyBpbXBvcnQgQnJlYWRDcnVtYiBtb2R1bGVcbiAqICAgICBib290c3RyYXA6ICAgIFtBcHBDb21wb25lbnRdXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7fVxuICpcbiAqIC8vIENvbXBpbGUgYW5kIGxhdW5jaCB0aGUgbW9kdWxlXG4gKiBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljKCkuYm9vdHN0cmFwTW9kdWxlKEFwcE1vZHVsZSk7XG4gKlxuICogYGBgXG4gKi9cbnZhciBCcmVhZENydW1iTW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEJyZWFkQ3J1bWJNb2R1bGUoKSB7XG4gICAgfVxuICAgIEJyZWFkQ3J1bWJNb2R1bGUgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBOZ01vZHVsZSh7XG4gICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtkZWNsYXJhdGlvbnNdLFxuICAgICAgICAgICAgZXhwb3J0czogW2V4cG9ydGVkTW9kdWxlc10sXG4gICAgICAgICAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBSZXNpemVTZW5zb3JNb2R1bGVdXG4gICAgICAgIH0pXG4gICAgXSwgQnJlYWRDcnVtYk1vZHVsZSk7XG4gICAgcmV0dXJuIEJyZWFkQ3J1bWJNb2R1bGU7XG59KCkpO1xuZXhwb3J0IHsgQnJlYWRDcnVtYk1vZHVsZSB9O1xuIl19