/**-----------------------------------------------------------------------------------------
* Copyright Â© 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, Output, Input, EventEmitter, TemplateRef, ViewChildren, QueryList, ElementRef, NgZone } from '@angular/core';
import { fromEvent, merge } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { Keys } from '@progress/kendo-angular-common';
import { BREADCRUMB_ITEM_INDEX } from './models/constants';
import { BreadCrumbItemComponent } from './breadcrumb-item.component';
import { closestItem, itemIndex } from '../common/dom-queries';
import { isPresent } from '../common/util';
/**
 * @hidden
 */
var BreadCrumbListComponent = /** @class */ (function () {
    function BreadCrumbListComponent(el, zone) {
        var _this = this;
        this.el = el;
        this.zone = zone;
        this.items = [];
        this.collapseMode = 'auto';
        this.itemClick = new EventEmitter();
        var element = this.el.nativeElement;
        this.isRootItemContainer = element.classList.contains('k-breadcrumb-root-item-container');
        this.zone.runOutsideAngular(function () {
            var click$ = fromEvent(element, 'click');
            var enterKey$ = fromEvent(element, 'keydown').pipe(filter(function (ev /* KeyboardEvent causes lint error */) { return ev.keyCode === Keys.Enter; }));
            _this.domEventsSubscription = merge(click$, enterKey$)
                .pipe(map(function (ev) { return ev.target; }), filter(function (e) { return !e.classList.contains('k-breadcrumb-delimiter-icon'); }), // do not trigger handler when a separator is clicked
            map(function (e) { return _this.getItemIndex(e); }), filter(isPresent), map(function (i) { return parseInt(i, 10); }), map(function (i) { return _this.items[i]; }), filter(function (item) { return !item.data.disabled && !item.context.isLast; }), map(function (item) { return item.data; }))
                .subscribe(function (el) {
                _this.zone.run(function () { return _this.itemClick.emit(el); });
            });
        });
    }
    BreadCrumbListComponent.prototype.ngOnDestroy = function () {
        this.domEventsSubscription.unsubscribe();
    };
    BreadCrumbListComponent.prototype.getItemIndex = function (target) {
        var item = closestItem(target, BREADCRUMB_ITEM_INDEX, this.el.nativeElement);
        if (item) {
            return itemIndex(item, BREADCRUMB_ITEM_INDEX);
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], BreadCrumbListComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", TemplateRef)
    ], BreadCrumbListComponent.prototype, "itemTemplate", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], BreadCrumbListComponent.prototype, "collapseMode", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], BreadCrumbListComponent.prototype, "separatorIcon", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], BreadCrumbListComponent.prototype, "itemClick", void 0);
    tslib_1.__decorate([
        ViewChildren(BreadCrumbItemComponent, { static: true }),
        tslib_1.__metadata("design:type", QueryList)
    ], BreadCrumbListComponent.prototype, "renderedItems", void 0);
    BreadCrumbListComponent = tslib_1.__decorate([
        Component({
            selector: '[kendoBreadCrumbList]',
            template: "\n        <ng-container *ngFor=\"let item of items; let i = index; let isFirst = first; let isLast = last\">\n            <li\n                #renderedItem\n                kendoBreadCrumbItem\n                *ngIf=\"!(collapseMode === 'wrap' && isFirst) || isRootItemContainer\"\n                [attr." + BREADCRUMB_ITEM_INDEX + "]=\"i\"\n                [item]=\"item\"\n                [index]=\"i\"\n                [collapseMode]=\"collapseMode\"\n                [itemTemplate]=\"itemTemplate\"\n            >\n                <span kendoBreadCrumbSeparator [icon]=\"separatorIcon\" *ngIf=\"collapseMode === 'wrap' && !isFirst\"></span>\n                <span\n                    kendoBreadCrumbSeparator\n                    [icon]=\"separatorIcon\"\n                    *ngIf=\"collapseMode !== 'wrap' && !isLast && !(item?.context.collapsed && items[i + 1]?.context.collapsed)\"\n                ></span>\n            </li>\n        </ng-container>\n    "
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef, NgZone])
    ], BreadCrumbListComponent);
    return BreadCrumbListComponent;
}());
export { BreadCrumbListComponent };
