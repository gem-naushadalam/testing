/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, Output, Input, EventEmitter, TemplateRef, ViewChildren, QueryList, ElementRef, NgZone } from '@angular/core';
import { fromEvent, merge } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { Keys } from '@progress/kendo-angular-common';
import { BREADCRUMB_ITEM_INDEX } from './models/constants';
import { BreadCrumbItemComponent } from './breadcrumb-item.component';
import { closestItem, itemIndex } from '../common/dom-queries';
import { isPresent } from '../common/util';
/**
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from './breadcrumb-item.component';
import * as ɵngcc3 from './template-directives/separator.directive';

var _c0 = ["kendoBreadCrumbList", ""];
function BreadCrumbListComponent_ng_container_0_li_1_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 5);
} if (rf & 2) {
    var ctx_r7 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("icon", ctx_r7.separatorIcon);
} }
function BreadCrumbListComponent_ng_container_0_li_1_span_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 5);
} if (rf & 2) {
    var ctx_r8 = ɵngcc0.ɵɵnextContext(3);
    ɵngcc0.ɵɵproperty("icon", ctx_r8.separatorIcon);
} }
function BreadCrumbListComponent_ng_container_0_li_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "li", 2, 3);
    ɵngcc0.ɵɵtemplate(2, BreadCrumbListComponent_ng_container_0_li_1_span_2_Template, 1, 1, "span", 4);
    ɵngcc0.ɵɵtemplate(3, BreadCrumbListComponent_ng_container_0_li_1_span_3_Template, 1, 1, "span", 4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var ctx_r9 = ɵngcc0.ɵɵnextContext();
    var item_r1 = ctx_r9.$implicit;
    var i_r2 = ctx_r9.index;
    var isFirst_r3 = ctx_r9.first;
    var isLast_r4 = ctx_r9.last;
    var ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("item", item_r1)("index", i_r2)("collapseMode", ctx_r5.collapseMode)("itemTemplate", ctx_r5.itemTemplate);
    ɵngcc0.ɵɵattribute("data-kendo-breadcrumb-index", i_r2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.collapseMode === "wrap" && !isFirst_r3);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r5.collapseMode !== "wrap" && !isLast_r4 && !((item_r1 == null ? null : item_r1.context.collapsed) && (ctx_r5.items[i_r2 + 1] == null ? null : ctx_r5.items[i_r2 + 1].context.collapsed)));
} }
function BreadCrumbListComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, BreadCrumbListComponent_ng_container_0_li_1_Template, 4, 7, "li", 1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    var isFirst_r3 = ctx.first;
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !(ctx_r0.collapseMode === "wrap" && isFirst_r3) || ctx_r0.isRootItemContainer);
} }
var BreadCrumbListComponent = /** @class */ (function () {
    function BreadCrumbListComponent(el, zone) {
        var _this = this;
        this.el = el;
        this.zone = zone;
        this.items = [];
        this.collapseMode = 'auto';
        this.itemClick = new EventEmitter();
        var element = this.el.nativeElement;
        this.isRootItemContainer = element.classList.contains('k-breadcrumb-root-item-container');
        this.zone.runOutsideAngular(function () {
            var click$ = fromEvent(element, 'click');
            var enterKey$ = fromEvent(element, 'keydown').pipe(filter(function (ev /* KeyboardEvent causes lint error */) { return ev.keyCode === Keys.Enter; }));
            _this.domEventsSubscription = merge(click$, enterKey$)
                .pipe(map(function (ev) { return ev.target; }), filter(function (e) { return !e.classList.contains('k-breadcrumb-delimiter-icon'); }), // do not trigger handler when a separator is clicked
            map(function (e) { return _this.getItemIndex(e); }), filter(isPresent), map(function (i) { return parseInt(i, 10); }), map(function (i) { return _this.items[i]; }), filter(function (item) { return !item.data.disabled && !item.context.isLast; }), map(function (item) { return item.data; }))
                .subscribe(function (el) {
                _this.zone.run(function () { return _this.itemClick.emit(el); });
            });
        });
    }
    BreadCrumbListComponent.prototype.ngOnDestroy = function () {
        this.domEventsSubscription.unsubscribe();
    };
    BreadCrumbListComponent.prototype.getItemIndex = function (target) {
        var item = closestItem(target, BREADCRUMB_ITEM_INDEX, this.el.nativeElement);
        if (item) {
            return itemIndex(item, BREADCRUMB_ITEM_INDEX);
        }
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", Array)
    ], BreadCrumbListComponent.prototype, "items", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", TemplateRef)
    ], BreadCrumbListComponent.prototype, "itemTemplate", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], BreadCrumbListComponent.prototype, "collapseMode", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String)
    ], BreadCrumbListComponent.prototype, "separatorIcon", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", EventEmitter)
    ], BreadCrumbListComponent.prototype, "itemClick", void 0);
    tslib_1.__decorate([
        ViewChildren(BreadCrumbItemComponent, { static: true }),
        tslib_1.__metadata("design:type", QueryList)
    ], BreadCrumbListComponent.prototype, "renderedItems", void 0);
    BreadCrumbListComponent = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [ElementRef, NgZone])
    ], BreadCrumbListComponent);
BreadCrumbListComponent.ɵfac = function BreadCrumbListComponent_Factory(t) { return new (t || BreadCrumbListComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
BreadCrumbListComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: BreadCrumbListComponent, selectors: [["", "kendoBreadCrumbList", ""]], viewQuery: function BreadCrumbListComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(BreadCrumbItemComponent, 3);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.renderedItems = _t);
    } }, inputs: { items: "items", collapseMode: "collapseMode", itemTemplate: "itemTemplate", separatorIcon: "separatorIcon" }, outputs: { itemClick: "itemClick" }, attrs: _c0, decls: 1, vars: 1, consts: [[4, "ngFor", "ngForOf"], ["kendoBreadCrumbItem", "", 3, "item", "index", "collapseMode", "itemTemplate", 4, "ngIf"], ["kendoBreadCrumbItem", "", 3, "item", "index", "collapseMode", "itemTemplate"], ["renderedItem", ""], ["kendoBreadCrumbSeparator", "", 3, "icon", 4, "ngIf"], ["kendoBreadCrumbSeparator", "", 3, "icon"]], template: function BreadCrumbListComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, BreadCrumbListComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.items);
    } }, directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc2.BreadCrumbItemComponent, ɵngcc3.BreadCrumbSeparatorDirective], encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadCrumbListComponent, [{
        type: Component,
        args: [{
                selector: '[kendoBreadCrumbList]',
                template: "\n        <ng-container *ngFor=\"let item of items; let i = index; let isFirst = first; let isLast = last\">\n            <li\n                #renderedItem\n                kendoBreadCrumbItem\n                *ngIf=\"!(collapseMode === 'wrap' && isFirst) || isRootItemContainer\"\n                [attr." + BREADCRUMB_ITEM_INDEX + "]=\"i\"\n                [item]=\"item\"\n                [index]=\"i\"\n                [collapseMode]=\"collapseMode\"\n                [itemTemplate]=\"itemTemplate\"\n            >\n                <span kendoBreadCrumbSeparator [icon]=\"separatorIcon\" *ngIf=\"collapseMode === 'wrap' && !isFirst\"></span>\n                <span\n                    kendoBreadCrumbSeparator\n                    [icon]=\"separatorIcon\"\n                    *ngIf=\"collapseMode !== 'wrap' && !isLast && !(item?.context.collapsed && items[i + 1]?.context.collapsed)\"\n                ></span>\n            </li>\n        </ng-container>\n    "
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { items: [{
            type: Input
        }], collapseMode: [{
            type: Input
        }], itemClick: [{
            type: Output
        }], itemTemplate: [{
            type: Input
        }], separatorIcon: [{
            type: Input
        }], renderedItems: [{
            type: ViewChildren,
            args: [BreadCrumbItemComponent, { static: true }]
        }] }); })();
    return BreadCrumbListComponent;
}());
export { BreadCrumbListComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbImxpc3QuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFLTztBQUNQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFnQztBQUNoQztBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBPdXRwdXQsIElucHV0LCBFdmVudEVtaXR0ZXIsIFRlbXBsYXRlUmVmLCBWaWV3Q2hpbGRyZW4sIFF1ZXJ5TGlzdCwgRWxlbWVudFJlZiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIG1lcmdlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEtleXMgfSBmcm9tICdAcHJvZ3Jlc3Mva2VuZG8tYW5ndWxhci1jb21tb24nO1xuaW1wb3J0IHsgQlJFQURDUlVNQl9JVEVNX0lOREVYIH0gZnJvbSAnLi9tb2RlbHMvY29uc3RhbnRzJztcbmltcG9ydCB7IEJyZWFkQ3J1bWJJdGVtQ29tcG9uZW50IH0gZnJvbSAnLi9icmVhZGNydW1iLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7IGNsb3Nlc3RJdGVtLCBpdGVtSW5kZXggfSBmcm9tICcuLi9jb21tb24vZG9tLXF1ZXJpZXMnO1xuaW1wb3J0IHsgaXNQcmVzZW50IH0gZnJvbSAnLi4vY29tbW9uL3V0aWwnO1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbnZhciBCcmVhZENydW1iTGlzdENvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCcmVhZENydW1iTGlzdENvbXBvbmVudChlbCwgem9uZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmVsID0gZWw7XG4gICAgICAgIHRoaXMuem9uZSA9IHpvbmU7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICAgICAgdGhpcy5jb2xsYXBzZU1vZGUgPSAnYXV0byc7XG4gICAgICAgIHRoaXMuaXRlbUNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5pc1Jvb3RJdGVtQ29udGFpbmVyID0gZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMoJ2stYnJlYWRjcnVtYi1yb290LWl0ZW0tY29udGFpbmVyJyk7XG4gICAgICAgIHRoaXMuem9uZS5ydW5PdXRzaWRlQW5ndWxhcihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgY2xpY2skID0gZnJvbUV2ZW50KGVsZW1lbnQsICdjbGljaycpO1xuICAgICAgICAgICAgdmFyIGVudGVyS2V5JCA9IGZyb21FdmVudChlbGVtZW50LCAna2V5ZG93bicpLnBpcGUoZmlsdGVyKGZ1bmN0aW9uIChldiAvKiBLZXlib2FyZEV2ZW50IGNhdXNlcyBsaW50IGVycm9yICovKSB7IHJldHVybiBldi5rZXlDb2RlID09PSBLZXlzLkVudGVyOyB9KSk7XG4gICAgICAgICAgICBfdGhpcy5kb21FdmVudHNTdWJzY3JpcHRpb24gPSBtZXJnZShjbGljayQsIGVudGVyS2V5JClcbiAgICAgICAgICAgICAgICAucGlwZShtYXAoZnVuY3Rpb24gKGV2KSB7IHJldHVybiBldi50YXJnZXQ7IH0pLCBmaWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuICFlLmNsYXNzTGlzdC5jb250YWlucygnay1icmVhZGNydW1iLWRlbGltaXRlci1pY29uJyk7IH0pLCAvLyBkbyBub3QgdHJpZ2dlciBoYW5kbGVyIHdoZW4gYSBzZXBhcmF0b3IgaXMgY2xpY2tlZFxuICAgICAgICAgICAgbWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBfdGhpcy5nZXRJdGVtSW5kZXgoZSk7IH0pLCBmaWx0ZXIoaXNQcmVzZW50KSwgbWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiBwYXJzZUludChpLCAxMCk7IH0pLCBtYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIF90aGlzLml0ZW1zW2ldOyB9KSwgZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiAhaXRlbS5kYXRhLmRpc2FibGVkICYmICFpdGVtLmNvbnRleHQuaXNMYXN0OyB9KSwgbWFwKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtLmRhdGE7IH0pKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuem9uZS5ydW4oZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuaXRlbUNsaWNrLmVtaXQoZWwpOyB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgQnJlYWRDcnVtYkxpc3RDb21wb25lbnQucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmRvbUV2ZW50c1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgQnJlYWRDcnVtYkxpc3RDb21wb25lbnQucHJvdG90eXBlLmdldEl0ZW1JbmRleCA9IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSBjbG9zZXN0SXRlbSh0YXJnZXQsIEJSRUFEQ1JVTUJfSVRFTV9JTkRFWCwgdGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgICAgICAgaWYgKGl0ZW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtSW5kZXgoaXRlbSwgQlJFQURDUlVNQl9JVEVNX0lOREVYKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQXJyYXkpXG4gICAgXSwgQnJlYWRDcnVtYkxpc3RDb21wb25lbnQucHJvdG90eXBlLCBcIml0ZW1zXCIsIHZvaWQgMCk7XG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgVGVtcGxhdGVSZWYpXG4gICAgXSwgQnJlYWRDcnVtYkxpc3RDb21wb25lbnQucHJvdG90eXBlLCBcIml0ZW1UZW1wbGF0ZVwiLCB2b2lkIDApO1xuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIElucHV0KCksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBCcmVhZENydW1iTGlzdENvbXBvbmVudC5wcm90b3R5cGUsIFwiY29sbGFwc2VNb2RlXCIsIHZvaWQgMCk7XG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIEJyZWFkQ3J1bWJMaXN0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJzZXBhcmF0b3JJY29uXCIsIHZvaWQgMCk7XG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgT3V0cHV0KCksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEV2ZW50RW1pdHRlcilcbiAgICBdLCBCcmVhZENydW1iTGlzdENvbXBvbmVudC5wcm90b3R5cGUsIFwiaXRlbUNsaWNrXCIsIHZvaWQgMCk7XG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgVmlld0NoaWxkcmVuKEJyZWFkQ3J1bWJJdGVtQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgUXVlcnlMaXN0KVxuICAgIF0sIEJyZWFkQ3J1bWJMaXN0Q29tcG9uZW50LnByb3RvdHlwZSwgXCJyZW5kZXJlZEl0ZW1zXCIsIHZvaWQgMCk7XG4gICAgQnJlYWRDcnVtYkxpc3RDb21wb25lbnQgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBDb21wb25lbnQoe1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdba2VuZG9CcmVhZENydW1iTGlzdF0nLFxuICAgICAgICAgICAgdGVtcGxhdGU6IFwiXFxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cXFwibGV0IGl0ZW0gb2YgaXRlbXM7IGxldCBpID0gaW5kZXg7IGxldCBpc0ZpcnN0ID0gZmlyc3Q7IGxldCBpc0xhc3QgPSBsYXN0XFxcIj5cXG4gICAgICAgICAgICA8bGlcXG4gICAgICAgICAgICAgICAgI3JlbmRlcmVkSXRlbVxcbiAgICAgICAgICAgICAgICBrZW5kb0JyZWFkQ3J1bWJJdGVtXFxuICAgICAgICAgICAgICAgICpuZ0lmPVxcXCIhKGNvbGxhcHNlTW9kZSA9PT0gJ3dyYXAnICYmIGlzRmlyc3QpIHx8IGlzUm9vdEl0ZW1Db250YWluZXJcXFwiXFxuICAgICAgICAgICAgICAgIFthdHRyLlwiICsgQlJFQURDUlVNQl9JVEVNX0lOREVYICsgXCJdPVxcXCJpXFxcIlxcbiAgICAgICAgICAgICAgICBbaXRlbV09XFxcIml0ZW1cXFwiXFxuICAgICAgICAgICAgICAgIFtpbmRleF09XFxcImlcXFwiXFxuICAgICAgICAgICAgICAgIFtjb2xsYXBzZU1vZGVdPVxcXCJjb2xsYXBzZU1vZGVcXFwiXFxuICAgICAgICAgICAgICAgIFtpdGVtVGVtcGxhdGVdPVxcXCJpdGVtVGVtcGxhdGVcXFwiXFxuICAgICAgICAgICAgPlxcbiAgICAgICAgICAgICAgICA8c3BhbiBrZW5kb0JyZWFkQ3J1bWJTZXBhcmF0b3IgW2ljb25dPVxcXCJzZXBhcmF0b3JJY29uXFxcIiAqbmdJZj1cXFwiY29sbGFwc2VNb2RlID09PSAnd3JhcCcgJiYgIWlzRmlyc3RcXFwiPjwvc3Bhbj5cXG4gICAgICAgICAgICAgICAgPHNwYW5cXG4gICAgICAgICAgICAgICAgICAgIGtlbmRvQnJlYWRDcnVtYlNlcGFyYXRvclxcbiAgICAgICAgICAgICAgICAgICAgW2ljb25dPVxcXCJzZXBhcmF0b3JJY29uXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgKm5nSWY9XFxcImNvbGxhcHNlTW9kZSAhPT0gJ3dyYXAnICYmICFpc0xhc3QgJiYgIShpdGVtPy5jb250ZXh0LmNvbGxhcHNlZCAmJiBpdGVtc1tpICsgMV0/LmNvbnRleHQuY29sbGFwc2VkKVxcXCJcXG4gICAgICAgICAgICAgICAgPjwvc3Bhbj5cXG4gICAgICAgICAgICA8L2xpPlxcbiAgICAgICAgPC9uZy1jb250YWluZXI+XFxuICAgIFwiXG4gICAgICAgIH0pLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbRWxlbWVudFJlZiwgTmdab25lXSlcbiAgICBdLCBCcmVhZENydW1iTGlzdENvbXBvbmVudCk7XG4gICAgcmV0dXJuIEJyZWFkQ3J1bWJMaXN0Q29tcG9uZW50O1xufSgpKTtcbmV4cG9ydCB7IEJyZWFkQ3J1bWJMaXN0Q29tcG9uZW50IH07XG4iXX0=