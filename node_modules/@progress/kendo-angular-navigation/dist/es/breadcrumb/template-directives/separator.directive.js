/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Directive, HostBinding, Input, ElementRef } from '@angular/core';
import { isPresent } from '../../common/util';
import { LocalizationService } from '@progress/kendo-angular-l10n';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@progress/kendo-angular-l10n';
var DEFAULT_ICON = 'arrow-chevron-right';
var DEFAULT_RTL_ICON = 'arrow-chevron-left';
/**
 * @hidden
 */
var BreadCrumbSeparatorDirective = /** @class */ (function () {
    function BreadCrumbSeparatorDirective(el, localization) {
        this.el = el;
        this.localization = localization;
        this.defaultClasses = true;
        this.ariaHidden = true;
        this.direction = 'ltr';
        this.direction = this.localization.rtl ? 'rtl' : 'ltr';
    }
    Object.defineProperty(BreadCrumbSeparatorDirective.prototype, "icon", {
        get: function () {
            return this._icon;
        },
        set: function (icon) {
            var element = this.el.nativeElement;
            element.classList.remove("k-i-" + this._icon);
            if (isPresent(icon)) {
                this._icon = icon;
                this.hasDefaultIcon = false;
            }
            else {
                this._icon = this.direction === 'ltr' ? DEFAULT_ICON : DEFAULT_RTL_ICON;
                this.hasDefaultIcon = true;
            }
            element.classList.add("k-i-" + this._icon);
        },
        enumerable: true,
        configurable: true
    });
    BreadCrumbSeparatorDirective.prototype.ngOnInit = function () {
        var _this = this;
        this.localizationChangesSubscription = this.localization.changes.subscribe(function (_a) {
            var rtl = _a.rtl;
            _this.direction = rtl ? 'rtl' : 'ltr';
            if (_this.hasDefaultIcon) {
                _this.icon = undefined;
            }
        });
    };
    BreadCrumbSeparatorDirective.prototype.ngOnDestroy = function () {
        this.localizationChangesSubscription.unsubscribe();
    };
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], BreadCrumbSeparatorDirective.prototype, "icon", null);
    tslib_1.__decorate([
        HostBinding('class.k-breadcrumb-delimiter-icon'),
        HostBinding('class.k-icon'),
        tslib_1.__metadata("design:type", Boolean)
    ], BreadCrumbSeparatorDirective.prototype, "defaultClasses", void 0);
    tslib_1.__decorate([
        HostBinding('attr.aria-hidden'),
        tslib_1.__metadata("design:type", Boolean)
    ], BreadCrumbSeparatorDirective.prototype, "ariaHidden", void 0);
    BreadCrumbSeparatorDirective = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [ElementRef, LocalizationService])
    ], BreadCrumbSeparatorDirective);
BreadCrumbSeparatorDirective.ɵfac = function BreadCrumbSeparatorDirective_Factory(t) { return new (t || BreadCrumbSeparatorDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LocalizationService)); };
BreadCrumbSeparatorDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: BreadCrumbSeparatorDirective, selectors: [["", "kendoBreadCrumbSeparator", ""]], hostVars: 5, hostBindings: function BreadCrumbSeparatorDirective_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-hidden", ctx.ariaHidden);
        ɵngcc0.ɵɵclassProp("k-breadcrumb-delimiter-icon", ctx.defaultClasses)("k-icon", ctx.defaultClasses);
    } }, inputs: { icon: "icon" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BreadCrumbSeparatorDirective, [{
        type: Directive,
        args: [{
                selector: '[kendoBreadCrumbSeparator]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.LocalizationService }]; }, { defaultClasses: [{
            type: HostBinding,
            args: ['class.k-breadcrumb-delimiter-icon']
        }, {
            type: HostBinding,
            args: ['class.k-icon']
        }], ariaHidden: [{
            type: HostBinding,
            args: ['attr.aria-hidden']
        }], icon: [{
            type: Input
        }] }); })();
    return BreadCrumbSeparatorDirective;
}());
export { BreadCrumbSeparatorDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VwYXJhdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsic2VwYXJhdG9yLmRpcmVjdGl2ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUlPO0FBQ1A7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQXFDO0FBQ3JDO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbmltcG9ydCAqIGFzIHRzbGliXzEgZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBJbnB1dCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgaXNQcmVzZW50IH0gZnJvbSAnLi4vLi4vY29tbW9uL3V0aWwnO1xuaW1wb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9IGZyb20gJ0Bwcm9ncmVzcy9rZW5kby1hbmd1bGFyLWwxMG4nO1xudmFyIERFRkFVTFRfSUNPTiA9ICdhcnJvdy1jaGV2cm9uLXJpZ2h0JztcbnZhciBERUZBVUxUX1JUTF9JQ09OID0gJ2Fycm93LWNoZXZyb24tbGVmdCc7XG4vKipcbiAqIEBoaWRkZW5cbiAqL1xudmFyIEJyZWFkQ3J1bWJTZXBhcmF0b3JEaXJlY3RpdmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZShlbCwgbG9jYWxpemF0aW9uKSB7XG4gICAgICAgIHRoaXMuZWwgPSBlbDtcbiAgICAgICAgdGhpcy5sb2NhbGl6YXRpb24gPSBsb2NhbGl6YXRpb247XG4gICAgICAgIHRoaXMuZGVmYXVsdENsYXNzZXMgPSB0cnVlO1xuICAgICAgICB0aGlzLmFyaWFIaWRkZW4gPSB0cnVlO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9ICdsdHInO1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMubG9jYWxpemF0aW9uLnJ0bCA/ICdydGwnIDogJ2x0cic7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJpY29uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faWNvbjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoaWNvbikge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoXCJrLWktXCIgKyB0aGlzLl9pY29uKTtcbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQoaWNvbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pY29uID0gaWNvbjtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc0RlZmF1bHRJY29uID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pY29uID0gdGhpcy5kaXJlY3Rpb24gPT09ICdsdHInID8gREVGQVVMVF9JQ09OIDogREVGQVVMVF9SVExfSUNPTjtcbiAgICAgICAgICAgICAgICB0aGlzLmhhc0RlZmF1bHRJY29uID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChcImstaS1cIiArIHRoaXMuX2ljb24pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBCcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlLnByb3RvdHlwZS5uZ09uSW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5sb2NhbGl6YXRpb25DaGFuZ2VzU3Vic2NyaXB0aW9uID0gdGhpcy5sb2NhbGl6YXRpb24uY2hhbmdlcy5zdWJzY3JpYmUoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgcnRsID0gX2EucnRsO1xuICAgICAgICAgICAgX3RoaXMuZGlyZWN0aW9uID0gcnRsID8gJ3J0bCcgOiAnbHRyJztcbiAgICAgICAgICAgIGlmIChfdGhpcy5oYXNEZWZhdWx0SWNvbikge1xuICAgICAgICAgICAgICAgIF90aGlzLmljb24gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZS5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubG9jYWxpemF0aW9uQ2hhbmdlc1N1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgIH07XG4gICAgdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgSW5wdXQoKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW1N0cmluZ10pXG4gICAgXSwgQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZS5wcm90b3R5cGUsIFwiaWNvblwiLCBudWxsKTtcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBIb3N0QmluZGluZygnY2xhc3Muay1icmVhZGNydW1iLWRlbGltaXRlci1pY29uJyksXG4gICAgICAgIEhvc3RCaW5kaW5nKCdjbGFzcy5rLWljb24nKSxcbiAgICAgICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgQm9vbGVhbilcbiAgICBdLCBCcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJkZWZhdWx0Q2xhc3Nlc1wiLCB2b2lkIDApO1xuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtaGlkZGVuJyksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIEJvb2xlYW4pXG4gICAgXSwgQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZS5wcm90b3R5cGUsIFwiYXJpYUhpZGRlblwiLCB2b2lkIDApO1xuICAgIEJyZWFkQ3J1bWJTZXBhcmF0b3JEaXJlY3RpdmUgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBEaXJlY3RpdmUoe1xuICAgICAgICAgICAgc2VsZWN0b3I6ICdba2VuZG9CcmVhZENydW1iU2VwYXJhdG9yXSdcbiAgICAgICAgfSksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtFbGVtZW50UmVmLCBMb2NhbGl6YXRpb25TZXJ2aWNlXSlcbiAgICBdLCBCcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlKTtcbiAgICByZXR1cm4gQnJlYWRDcnVtYlNlcGFyYXRvckRpcmVjdGl2ZTtcbn0oKSk7XG5leHBvcnQgeyBCcmVhZENydW1iU2VwYXJhdG9yRGlyZWN0aXZlIH07XG4iXX0=