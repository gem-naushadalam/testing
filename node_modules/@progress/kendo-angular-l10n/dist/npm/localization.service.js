/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var message_service_1 = require("./message.service");
var rtl_1 = require("./rtl");
var rxjs_1 = require("rxjs");
var operators_1 = require("rxjs/operators");
/**
 * Localization prefix for the component messages.
 *
 * For internal use.
 * @hidden
 */
exports.L10N_PREFIX = new core_1.InjectionToken('Localization key prefix');
/**
 * Component localization service.
 *
 * For internal use.
 * @hidden
 */
var ɵngcc0 = require('@angular/core');
var ɵngcc1 = require('./message.service');
var LocalizationService = /** @class */ (function () {
    function LocalizationService(prefix, messageService, _rtl) {
        var _this = this;
        this.prefix = prefix;
        this.messageService = messageService;
        this._rtl = _rtl;
        this.changes = new rxjs_1.BehaviorSubject({ rtl: this._rtl });
        this.dictionary = {};
        if (messageService) {
            this.subscription = messageService.changes
                .pipe(operators_1.map(function (_a) {
                var rtl = _a.rtl;
                return rtl !== undefined ? rtl : _this._rtl;
            }), operators_1.tap(function (rtl) { return _this._rtl = rtl; }))
                .subscribe(function (rtl) {
                _this.dictionary = {};
                _this.changes.next({ rtl: rtl });
            });
        }
    }
    Object.defineProperty(LocalizationService.prototype, "rtl", {
        get: function () {
            return this._rtl;
        },
        enumerable: true,
        configurable: true
    });
    LocalizationService.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    LocalizationService.prototype.get = function (shortKey) {
        var key = this.key(shortKey);
        return this.dictionary[key];
    };
    LocalizationService.prototype.register = function (shortKey, value, override) {
        if (override === void 0) { override = false; }
        var key = this.key(shortKey);
        var message = value;
        if (!override) {
            if (this.dictionary.hasOwnProperty(key)) {
                return;
            }
            message = this.defaultValue(key, value);
        }
        this.dictionary[key] = message;
    };
    LocalizationService.prototype.notifyChanges = function () {
        this.changes.next({ rtl: this.rtl });
    };
    LocalizationService.prototype.key = function (shortKey) {
        return this.prefix + '.' + shortKey;
    };
    LocalizationService.prototype.defaultValue = function (key, value) {
        if (!this.messageService) {
            return value;
        }
        var alt = this.messageService.get(key);
        return (alt === undefined) ? value : alt;
    };
    LocalizationService = tslib_1.__decorate([ tslib_1.__param(0, core_1.Inject(exports.L10N_PREFIX)),
        tslib_1.__param(1, core_1.Optional()),
        tslib_1.__param(2, core_1.Optional()), tslib_1.__param(2, core_1.Inject(rtl_1.RTL)),
        tslib_1.__metadata("design:paramtypes", [String, message_service_1.MessageService, Boolean])
    ], LocalizationService);
LocalizationService.ɵfac = function LocalizationService_Factory(t) { return new (t || LocalizationService)(ɵngcc0.ɵɵinject(exports.L10N_PREFIX), ɵngcc0.ɵɵinject(ɵngcc1.MessageService, 8), ɵngcc0.ɵɵinject(rtl_1.RTL, 8)); };
LocalizationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LocalizationService, factory: function (t) { return LocalizationService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocalizationService, [{
        type: core_1.Injectable
    }], function () { return [{ type: String, decorators: [{
                type: core_1.Inject,
                args: [exports.L10N_PREFIX]
            }] }, { type: ɵngcc1.MessageService, decorators: [{
                type: core_1.Optional
            }] }, { type: Boolean, decorators: [{
                type: core_1.Optional
            }, {
                type: core_1.Inject,
                args: [rtl_1.RTL]
            }] }]; }, null); })();
    return LocalizationService;
}());
exports.LocalizationService = LocalizationService;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbImxvY2FsaXphdGlvbi5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUVPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztrQ0FBNEI7QUFDNUI7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiogQ29weXJpZ2h0IMKpIDIwMjAgUHJvZ3Jlc3MgU29mdHdhcmUgQ29ycG9yYXRpb24uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4qIExpY2Vuc2VkIHVuZGVyIGNvbW1lcmNpYWwgbGljZW5zZS4gU2VlIExJQ0VOU0UubWQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbW9yZSBpbmZvcm1hdGlvblxuKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBtZXNzYWdlX3NlcnZpY2VfMSA9IHJlcXVpcmUoXCIuL21lc3NhZ2Uuc2VydmljZVwiKTtcbnZhciBydGxfMSA9IHJlcXVpcmUoXCIuL3J0bFwiKTtcbnZhciByeGpzXzEgPSByZXF1aXJlKFwicnhqc1wiKTtcbnZhciBvcGVyYXRvcnNfMSA9IHJlcXVpcmUoXCJyeGpzL29wZXJhdG9yc1wiKTtcbi8qKlxuICogTG9jYWxpemF0aW9uIHByZWZpeCBmb3IgdGhlIGNvbXBvbmVudCBtZXNzYWdlcy5cbiAqXG4gKiBGb3IgaW50ZXJuYWwgdXNlLlxuICogQGhpZGRlblxuICovXG5leHBvcnRzLkwxME5fUFJFRklYID0gbmV3IGNvcmVfMS5JbmplY3Rpb25Ub2tlbignTG9jYWxpemF0aW9uIGtleSBwcmVmaXgnKTtcbi8qKlxuICogQ29tcG9uZW50IGxvY2FsaXphdGlvbiBzZXJ2aWNlLlxuICpcbiAqIEZvciBpbnRlcm5hbCB1c2UuXG4gKiBAaGlkZGVuXG4gKi9cbnZhciBMb2NhbGl6YXRpb25TZXJ2aWNlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIExvY2FsaXphdGlvblNlcnZpY2UocHJlZml4LCBtZXNzYWdlU2VydmljZSwgX3J0bCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcbiAgICAgICAgdGhpcy5tZXNzYWdlU2VydmljZSA9IG1lc3NhZ2VTZXJ2aWNlO1xuICAgICAgICB0aGlzLl9ydGwgPSBfcnRsO1xuICAgICAgICB0aGlzLmNoYW5nZXMgPSBuZXcgcnhqc18xLkJlaGF2aW9yU3ViamVjdCh7IHJ0bDogdGhpcy5fcnRsIH0pO1xuICAgICAgICB0aGlzLmRpY3Rpb25hcnkgPSB7fTtcbiAgICAgICAgaWYgKG1lc3NhZ2VTZXJ2aWNlKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG1lc3NhZ2VTZXJ2aWNlLmNoYW5nZXNcbiAgICAgICAgICAgICAgICAucGlwZShvcGVyYXRvcnNfMS5tYXAoZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJ0bCA9IF9hLnJ0bDtcbiAgICAgICAgICAgICAgICByZXR1cm4gcnRsICE9PSB1bmRlZmluZWQgPyBydGwgOiBfdGhpcy5fcnRsO1xuICAgICAgICAgICAgfSksIG9wZXJhdG9yc18xLnRhcChmdW5jdGlvbiAocnRsKSB7IHJldHVybiBfdGhpcy5fcnRsID0gcnRsOyB9KSlcbiAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKGZ1bmN0aW9uIChydGwpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5kaWN0aW9uYXJ5ID0ge307XG4gICAgICAgICAgICAgICAgX3RoaXMuY2hhbmdlcy5uZXh0KHsgcnRsOiBydGwgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTG9jYWxpemF0aW9uU2VydmljZS5wcm90b3R5cGUsIFwicnRsXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcnRsO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBMb2NhbGl6YXRpb25TZXJ2aWNlLnByb3RvdHlwZS5uZ09uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBMb2NhbGl6YXRpb25TZXJ2aWNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAoc2hvcnRLZXkpIHtcbiAgICAgICAgdmFyIGtleSA9IHRoaXMua2V5KHNob3J0S2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGljdGlvbmFyeVtrZXldO1xuICAgIH07XG4gICAgTG9jYWxpemF0aW9uU2VydmljZS5wcm90b3R5cGUucmVnaXN0ZXIgPSBmdW5jdGlvbiAoc2hvcnRLZXksIHZhbHVlLCBvdmVycmlkZSkge1xuICAgICAgICBpZiAob3ZlcnJpZGUgPT09IHZvaWQgMCkgeyBvdmVycmlkZSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBrZXkgPSB0aGlzLmtleShzaG9ydEtleSk7XG4gICAgICAgIHZhciBtZXNzYWdlID0gdmFsdWU7XG4gICAgICAgIGlmICghb3ZlcnJpZGUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRpY3Rpb25hcnkuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lc3NhZ2UgPSB0aGlzLmRlZmF1bHRWYWx1ZShrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRpY3Rpb25hcnlba2V5XSA9IG1lc3NhZ2U7XG4gICAgfTtcbiAgICBMb2NhbGl6YXRpb25TZXJ2aWNlLnByb3RvdHlwZS5ub3RpZnlDaGFuZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmNoYW5nZXMubmV4dCh7IHJ0bDogdGhpcy5ydGwgfSk7XG4gICAgfTtcbiAgICBMb2NhbGl6YXRpb25TZXJ2aWNlLnByb3RvdHlwZS5rZXkgPSBmdW5jdGlvbiAoc2hvcnRLZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlZml4ICsgJy4nICsgc2hvcnRLZXk7XG4gICAgfTtcbiAgICBMb2NhbGl6YXRpb25TZXJ2aWNlLnByb3RvdHlwZS5kZWZhdWx0VmFsdWUgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoIXRoaXMubWVzc2FnZVNlcnZpY2UpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWx0ID0gdGhpcy5tZXNzYWdlU2VydmljZS5nZXQoa2V5KTtcbiAgICAgICAgcmV0dXJuIChhbHQgPT09IHVuZGVmaW5lZCkgPyB2YWx1ZSA6IGFsdDtcbiAgICB9O1xuICAgIExvY2FsaXphdGlvblNlcnZpY2UgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSgpLFxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMCwgY29yZV8xLkluamVjdChleHBvcnRzLkwxME5fUFJFRklYKSksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgxLCBjb3JlXzEuT3B0aW9uYWwoKSksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgyLCBjb3JlXzEuT3B0aW9uYWwoKSksIHRzbGliXzEuX19wYXJhbSgyLCBjb3JlXzEuSW5qZWN0KHJ0bF8xLlJUTCkpLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbU3RyaW5nLCBtZXNzYWdlX3NlcnZpY2VfMS5NZXNzYWdlU2VydmljZSwgQm9vbGVhbl0pXG4gICAgXSwgTG9jYWxpemF0aW9uU2VydmljZSk7XG4gICAgcmV0dXJuIExvY2FsaXphdGlvblNlcnZpY2U7XG59KCkpO1xuZXhwb3J0cy5Mb2NhbGl6YXRpb25TZXJ2aWNlID0gTG9jYWxpemF0aW9uU2VydmljZTtcbiJdfQ==