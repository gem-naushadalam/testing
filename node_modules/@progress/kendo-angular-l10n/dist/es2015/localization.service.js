/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional, InjectionToken } from '@angular/core';
import { MessageService } from './message.service';
import { RTL } from './rtl';
import { BehaviorSubject } from 'rxjs';
import { map, tap } from 'rxjs/operators';
/**
 * Localization prefix for the component messages.
 *
 * For internal use.
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './message.service';
export const L10N_PREFIX = new InjectionToken('Localization key prefix');
/**
 * Component localization service.
 *
 * For internal use.
 * @hidden
 */
let LocalizationService = class LocalizationService {
    constructor(prefix, messageService, _rtl) {
        this.prefix = prefix;
        this.messageService = messageService;
        this._rtl = _rtl;
        this.changes = new BehaviorSubject({ rtl: this._rtl });
        this.dictionary = {};
        if (messageService) {
            this.subscription = messageService.changes
                .pipe(map(({ rtl }) => rtl !== undefined ? rtl : this._rtl), tap(rtl => this._rtl = rtl))
                .subscribe(rtl => {
                this.dictionary = {};
                this.changes.next({ rtl });
            });
        }
    }
    get rtl() {
        return this._rtl;
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    get(shortKey) {
        const key = this.key(shortKey);
        return this.dictionary[key];
    }
    register(shortKey, value, override = false) {
        const key = this.key(shortKey);
        let message = value;
        if (!override) {
            if (this.dictionary.hasOwnProperty(key)) {
                return;
            }
            message = this.defaultValue(key, value);
        }
        this.dictionary[key] = message;
    }
    notifyChanges() {
        this.changes.next({ rtl: this.rtl });
    }
    key(shortKey) {
        return this.prefix + '.' + shortKey;
    }
    defaultValue(key, value) {
        if (!this.messageService) {
            return value;
        }
        const alt = this.messageService.get(key);
        return (alt === undefined) ? value : alt;
    }
};
LocalizationService.ɵfac = function LocalizationService_Factory(t) { return new (t || LocalizationService)(ɵngcc0.ɵɵinject(L10N_PREFIX), ɵngcc0.ɵɵinject(ɵngcc1.MessageService, 8), ɵngcc0.ɵɵinject(RTL, 8)); };
LocalizationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LocalizationService, factory: function (t) { return LocalizationService.ɵfac(t); } });
LocalizationService = tslib_1.__decorate([ tslib_1.__param(0, Inject(L10N_PREFIX)),
    tslib_1.__param(1, Optional()),
    tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(RTL)),
    tslib_1.__metadata("design:paramtypes", [String, MessageService, Boolean])
], LocalizationService);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocalizationService, [{
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [L10N_PREFIX]
            }] }, { type: ɵngcc1.MessageService, decorators: [{
                type: Optional
            }] }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RTL]
            }] }]; }, null); })();
export { LocalizationService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbImxvY2FsaXphdGlvbi5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O3FKQUFFO0FBQ0YsMENBRUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7OztrQ0FBd0I7QUFDeEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9tZXNzYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUlRMIH0gZnJvbSAnLi9ydGwnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbi8qKlxuICogTG9jYWxpemF0aW9uIHByZWZpeCBmb3IgdGhlIGNvbXBvbmVudCBtZXNzYWdlcy5cbiAqXG4gKiBGb3IgaW50ZXJuYWwgdXNlLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgY29uc3QgTDEwTl9QUkVGSVggPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0xvY2FsaXphdGlvbiBrZXkgcHJlZml4Jyk7XG4vKipcbiAqIENvbXBvbmVudCBsb2NhbGl6YXRpb24gc2VydmljZS5cbiAqXG4gKiBGb3IgaW50ZXJuYWwgdXNlLlxuICogQGhpZGRlblxuICovXG5sZXQgTG9jYWxpemF0aW9uU2VydmljZSA9IGNsYXNzIExvY2FsaXphdGlvblNlcnZpY2Uge1xuICAgIGNvbnN0cnVjdG9yKHByZWZpeCwgbWVzc2FnZVNlcnZpY2UsIF9ydGwpIHtcbiAgICAgICAgdGhpcy5wcmVmaXggPSBwcmVmaXg7XG4gICAgICAgIHRoaXMubWVzc2FnZVNlcnZpY2UgPSBtZXNzYWdlU2VydmljZTtcbiAgICAgICAgdGhpcy5fcnRsID0gX3J0bDtcbiAgICAgICAgdGhpcy5jaGFuZ2VzID0gbmV3IEJlaGF2aW9yU3ViamVjdCh7IHJ0bDogdGhpcy5fcnRsIH0pO1xuICAgICAgICB0aGlzLmRpY3Rpb25hcnkgPSB7fTtcbiAgICAgICAgaWYgKG1lc3NhZ2VTZXJ2aWNlKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG1lc3NhZ2VTZXJ2aWNlLmNoYW5nZXNcbiAgICAgICAgICAgICAgICAucGlwZShtYXAoKHsgcnRsIH0pID0+IHJ0bCAhPT0gdW5kZWZpbmVkID8gcnRsIDogdGhpcy5fcnRsKSwgdGFwKHJ0bCA9PiB0aGlzLl9ydGwgPSBydGwpKVxuICAgICAgICAgICAgICAgIC5zdWJzY3JpYmUocnRsID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpY3Rpb25hcnkgPSB7fTtcbiAgICAgICAgICAgICAgICB0aGlzLmNoYW5nZXMubmV4dCh7IHJ0bCB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldCBydGwoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ydGw7XG4gICAgfVxuICAgIG5nT25EZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0KHNob3J0S2V5KSB7XG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMua2V5KHNob3J0S2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGljdGlvbmFyeVtrZXldO1xuICAgIH1cbiAgICByZWdpc3RlcihzaG9ydEtleSwgdmFsdWUsIG92ZXJyaWRlID0gZmFsc2UpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5rZXkoc2hvcnRLZXkpO1xuICAgICAgICBsZXQgbWVzc2FnZSA9IHZhbHVlO1xuICAgICAgICBpZiAoIW92ZXJyaWRlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kaWN0aW9uYXJ5Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXNzYWdlID0gdGhpcy5kZWZhdWx0VmFsdWUoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaWN0aW9uYXJ5W2tleV0gPSBtZXNzYWdlO1xuICAgIH1cbiAgICBub3RpZnlDaGFuZ2VzKCkge1xuICAgICAgICB0aGlzLmNoYW5nZXMubmV4dCh7IHJ0bDogdGhpcy5ydGwgfSk7XG4gICAgfVxuICAgIGtleShzaG9ydEtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVmaXggKyAnLicgKyBzaG9ydEtleTtcbiAgICB9XG4gICAgZGVmYXVsdFZhbHVlKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1lc3NhZ2VTZXJ2aWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWx0ID0gdGhpcy5tZXNzYWdlU2VydmljZS5nZXQoa2V5KTtcbiAgICAgICAgcmV0dXJuIChhbHQgPT09IHVuZGVmaW5lZCkgPyB2YWx1ZSA6IGFsdDtcbiAgICB9XG59O1xuTG9jYWxpemF0aW9uU2VydmljZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgSW5qZWN0YWJsZSgpLFxuICAgIHRzbGliXzEuX19wYXJhbSgwLCBJbmplY3QoTDEwTl9QUkVGSVgpKSxcbiAgICB0c2xpYl8xLl9fcGFyYW0oMSwgT3B0aW9uYWwoKSksXG4gICAgdHNsaWJfMS5fX3BhcmFtKDIsIE9wdGlvbmFsKCkpLCB0c2xpYl8xLl9fcGFyYW0oMiwgSW5qZWN0KFJUTCkpLFxuICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtTdHJpbmcsIE1lc3NhZ2VTZXJ2aWNlLCBCb29sZWFuXSlcbl0sIExvY2FsaXphdGlvblNlcnZpY2UpO1xuZXhwb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9O1xuIl19