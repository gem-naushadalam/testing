/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional, InjectionToken } from '@angular/core';
import { MessageService } from './message.service';
import { RTL } from './rtl';
import { BehaviorSubject } from 'rxjs';
import { map, tap } from 'rxjs/operators';
/**
 * Localization prefix for the component messages.
 *
 * For internal use.
 * @hidden
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './message.service';
export var L10N_PREFIX = new InjectionToken('Localization key prefix');
/**
 * Component localization service.
 *
 * For internal use.
 * @hidden
 */
var LocalizationService = /** @class */ (function () {
    function LocalizationService(prefix, messageService, _rtl) {
        var _this = this;
        this.prefix = prefix;
        this.messageService = messageService;
        this._rtl = _rtl;
        this.changes = new BehaviorSubject({ rtl: this._rtl });
        this.dictionary = {};
        if (messageService) {
            this.subscription = messageService.changes
                .pipe(map(function (_a) {
                var rtl = _a.rtl;
                return rtl !== undefined ? rtl : _this._rtl;
            }), tap(function (rtl) { return _this._rtl = rtl; }))
                .subscribe(function (rtl) {
                _this.dictionary = {};
                _this.changes.next({ rtl: rtl });
            });
        }
    }
    Object.defineProperty(LocalizationService.prototype, "rtl", {
        get: function () {
            return this._rtl;
        },
        enumerable: true,
        configurable: true
    });
    LocalizationService.prototype.ngOnDestroy = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    LocalizationService.prototype.get = function (shortKey) {
        var key = this.key(shortKey);
        return this.dictionary[key];
    };
    LocalizationService.prototype.register = function (shortKey, value, override) {
        if (override === void 0) { override = false; }
        var key = this.key(shortKey);
        var message = value;
        if (!override) {
            if (this.dictionary.hasOwnProperty(key)) {
                return;
            }
            message = this.defaultValue(key, value);
        }
        this.dictionary[key] = message;
    };
    LocalizationService.prototype.notifyChanges = function () {
        this.changes.next({ rtl: this.rtl });
    };
    LocalizationService.prototype.key = function (shortKey) {
        return this.prefix + '.' + shortKey;
    };
    LocalizationService.prototype.defaultValue = function (key, value) {
        if (!this.messageService) {
            return value;
        }
        var alt = this.messageService.get(key);
        return (alt === undefined) ? value : alt;
    };
    LocalizationService = tslib_1.__decorate([ tslib_1.__param(0, Inject(L10N_PREFIX)),
        tslib_1.__param(1, Optional()),
        tslib_1.__param(2, Optional()), tslib_1.__param(2, Inject(RTL)),
        tslib_1.__metadata("design:paramtypes", [String, MessageService, Boolean])
    ], LocalizationService);
LocalizationService.ɵfac = function LocalizationService_Factory(t) { return new (t || LocalizationService)(ɵngcc0.ɵɵinject(L10N_PREFIX), ɵngcc0.ɵɵinject(ɵngcc1.MessageService, 8), ɵngcc0.ɵɵinject(RTL, 8)); };
LocalizationService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: LocalizationService, factory: function (t) { return LocalizationService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(LocalizationService, [{
        type: Injectable
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [L10N_PREFIX]
            }] }, { type: ɵngcc1.MessageService, decorators: [{
                type: Optional
            }] }, { type: Boolean, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [RTL]
            }] }]; }, null); })();
    return LocalizationService;
}());
export { LocalizationService };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxpemF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbImxvY2FsaXphdGlvbi5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBRU87QUFDUDtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O2tDQUE0QjtBQUM1QjtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1lc3NhZ2VTZXJ2aWNlIH0gZnJvbSAnLi9tZXNzYWdlLnNlcnZpY2UnO1xuaW1wb3J0IHsgUlRMIH0gZnJvbSAnLi9ydGwnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbi8qKlxuICogTG9jYWxpemF0aW9uIHByZWZpeCBmb3IgdGhlIGNvbXBvbmVudCBtZXNzYWdlcy5cbiAqXG4gKiBGb3IgaW50ZXJuYWwgdXNlLlxuICogQGhpZGRlblxuICovXG5leHBvcnQgdmFyIEwxME5fUFJFRklYID0gbmV3IEluamVjdGlvblRva2VuKCdMb2NhbGl6YXRpb24ga2V5IHByZWZpeCcpO1xuLyoqXG4gKiBDb21wb25lbnQgbG9jYWxpemF0aW9uIHNlcnZpY2UuXG4gKlxuICogRm9yIGludGVybmFsIHVzZS5cbiAqIEBoaWRkZW5cbiAqL1xudmFyIExvY2FsaXphdGlvblNlcnZpY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTG9jYWxpemF0aW9uU2VydmljZShwcmVmaXgsIG1lc3NhZ2VTZXJ2aWNlLCBfcnRsKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgICAgICB0aGlzLm1lc3NhZ2VTZXJ2aWNlID0gbWVzc2FnZVNlcnZpY2U7XG4gICAgICAgIHRoaXMuX3J0bCA9IF9ydGw7XG4gICAgICAgIHRoaXMuY2hhbmdlcyA9IG5ldyBCZWhhdmlvclN1YmplY3QoeyBydGw6IHRoaXMuX3J0bCB9KTtcbiAgICAgICAgdGhpcy5kaWN0aW9uYXJ5ID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlU2VydmljZSkge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24gPSBtZXNzYWdlU2VydmljZS5jaGFuZ2VzXG4gICAgICAgICAgICAgICAgLnBpcGUobWFwKGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgIHZhciBydGwgPSBfYS5ydGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJ0bCAhPT0gdW5kZWZpbmVkID8gcnRsIDogX3RoaXMuX3J0bDtcbiAgICAgICAgICAgIH0pLCB0YXAoZnVuY3Rpb24gKHJ0bCkgeyByZXR1cm4gX3RoaXMuX3J0bCA9IHJ0bDsgfSkpXG4gICAgICAgICAgICAgICAgLnN1YnNjcmliZShmdW5jdGlvbiAocnRsKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZGljdGlvbmFyeSA9IHt9O1xuICAgICAgICAgICAgICAgIF90aGlzLmNoYW5nZXMubmV4dCh7IHJ0bDogcnRsIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KExvY2FsaXphdGlvblNlcnZpY2UucHJvdG90eXBlLCBcInJ0bFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3J0bDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTG9jYWxpemF0aW9uU2VydmljZS5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTG9jYWxpemF0aW9uU2VydmljZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHNob3J0S2V5KSB7XG4gICAgICAgIHZhciBrZXkgPSB0aGlzLmtleShzaG9ydEtleSk7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY3Rpb25hcnlba2V5XTtcbiAgICB9O1xuICAgIExvY2FsaXphdGlvblNlcnZpY2UucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHNob3J0S2V5LCB2YWx1ZSwgb3ZlcnJpZGUpIHtcbiAgICAgICAgaWYgKG92ZXJyaWRlID09PSB2b2lkIDApIHsgb3ZlcnJpZGUgPSBmYWxzZTsgfVxuICAgICAgICB2YXIga2V5ID0gdGhpcy5rZXkoc2hvcnRLZXkpO1xuICAgICAgICB2YXIgbWVzc2FnZSA9IHZhbHVlO1xuICAgICAgICBpZiAoIW92ZXJyaWRlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kaWN0aW9uYXJ5Lmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXNzYWdlID0gdGhpcy5kZWZhdWx0VmFsdWUoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaWN0aW9uYXJ5W2tleV0gPSBtZXNzYWdlO1xuICAgIH07XG4gICAgTG9jYWxpemF0aW9uU2VydmljZS5wcm90b3R5cGUubm90aWZ5Q2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VzLm5leHQoeyBydGw6IHRoaXMucnRsIH0pO1xuICAgIH07XG4gICAgTG9jYWxpemF0aW9uU2VydmljZS5wcm90b3R5cGUua2V5ID0gZnVuY3Rpb24gKHNob3J0S2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnByZWZpeCArICcuJyArIHNob3J0S2V5O1xuICAgIH07XG4gICAgTG9jYWxpemF0aW9uU2VydmljZS5wcm90b3R5cGUuZGVmYXVsdFZhbHVlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLm1lc3NhZ2VTZXJ2aWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGFsdCA9IHRoaXMubWVzc2FnZVNlcnZpY2UuZ2V0KGtleSk7XG4gICAgICAgIHJldHVybiAoYWx0ID09PSB1bmRlZmluZWQpID8gdmFsdWUgOiBhbHQ7XG4gICAgfTtcbiAgICBMb2NhbGl6YXRpb25TZXJ2aWNlID0gdHNsaWJfMS5fX2RlY29yYXRlKFtcbiAgICAgICAgSW5qZWN0YWJsZSgpLFxuICAgICAgICB0c2xpYl8xLl9fcGFyYW0oMCwgSW5qZWN0KEwxME5fUFJFRklYKSksXG4gICAgICAgIHRzbGliXzEuX19wYXJhbSgxLCBPcHRpb25hbCgpKSxcbiAgICAgICAgdHNsaWJfMS5fX3BhcmFtKDIsIE9wdGlvbmFsKCkpLCB0c2xpYl8xLl9fcGFyYW0oMiwgSW5qZWN0KFJUTCkpLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbU3RyaW5nLCBNZXNzYWdlU2VydmljZSwgQm9vbGVhbl0pXG4gICAgXSwgTG9jYWxpemF0aW9uU2VydmljZSk7XG4gICAgcmV0dXJuIExvY2FsaXphdGlvblNlcnZpY2U7XG59KCkpO1xuZXhwb3J0IHsgTG9jYWxpemF0aW9uU2VydmljZSB9O1xuIl19