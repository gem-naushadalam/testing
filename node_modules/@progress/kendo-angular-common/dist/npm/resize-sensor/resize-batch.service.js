/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
/* tslint:disable:align */
/**
 * @hidden
 */
var ɵngcc0 = require('@angular/core');
var ResizeBatchService = /** @class */ (function () {
    function ResizeBatchService(ngZone) {
        this.ngZone = ngZone;
        this.scheduled = [];
        this.resolvedPromise = Promise.resolve(null);
        this.flush = this.flush.bind(this);
    }
    ResizeBatchService.prototype.schedule = function (instance, method) {
        var _this = this;
        this.scheduled.push({ instance: instance, method: method });
        if (!this.subscription) {
            this.ngZone.runOutsideAngular(function () {
                _this.subscription = rxjs_1.from(_this.resolvedPromise)
                    .subscribe(_this.flush);
            });
        }
    };
    ResizeBatchService.prototype.isScheduled = function (instance) {
        return Boolean(this.scheduled.find(function (item) { return item.instance === instance; }));
    };
    ResizeBatchService.prototype.cancel = function (instance) {
        var scheduled = this.scheduled;
        var count = scheduled.length;
        for (var idx = 0; idx < count; idx++) {
            if (scheduled[idx].instance === instance) {
                scheduled.splice(idx, 1);
                if (!scheduled.length) {
                    this.unsubscribe();
                }
                return;
            }
        }
    };
    ResizeBatchService.prototype.ngOnDestroy = function () {
        this.unsubscribe();
    };
    ResizeBatchService.prototype.unsubscribe = function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    };
    ResizeBatchService.prototype.flush = function () {
        this.scheduled.forEach(function (item) {
            item.method.call(item.instance);
        });
        this.scheduled = [];
        this.unsubscribe();
    };
    ResizeBatchService = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [core_1.NgZone])
    ], ResizeBatchService);
ResizeBatchService.ɵfac = function ResizeBatchService_Factory(t) { return new (t || ResizeBatchService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };
ResizeBatchService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ResizeBatchService, factory: function (t) { return ResizeBatchService.ɵfac(t); } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResizeBatchService, [{
        type: core_1.Injectable
    }], function () { return [{ type: ɵngcc0.NgZone }]; }, null); })();
    return ResizeBatchService;
}());
exports.ResizeBatchService = ResizeBatchService;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLWJhdGNoLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbInJlc2l6ZS1iYXRjaC5zZXJ2aWNlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBRU87QUFDUDs7Ozs7dUVBQTJCO0FBQzNCO0FBQ0E7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4qIENvcHlyaWdodCDCqSAyMDIwIFByb2dyZXNzIFNvZnR3YXJlIENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuKiBMaWNlbnNlZCB1bmRlciBjb21tZXJjaWFsIGxpY2Vuc2UuIFNlZSBMSUNFTlNFLm1kIGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHRzbGliXzEgPSByZXF1aXJlKFwidHNsaWJcIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgcnhqc18xID0gcmVxdWlyZShcInJ4anNcIik7XG4vKiB0c2xpbnQ6ZGlzYWJsZTphbGlnbiAqL1xuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbnZhciBSZXNpemVCYXRjaFNlcnZpY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzaXplQmF0Y2hTZXJ2aWNlKG5nWm9uZSkge1xuICAgICAgICB0aGlzLm5nWm9uZSA9IG5nWm9uZTtcbiAgICAgICAgdGhpcy5zY2hlZHVsZWQgPSBbXTtcbiAgICAgICAgdGhpcy5yZXNvbHZlZFByb21pc2UgPSBQcm9taXNlLnJlc29sdmUobnVsbCk7XG4gICAgICAgIHRoaXMuZmx1c2ggPSB0aGlzLmZsdXNoLmJpbmQodGhpcyk7XG4gICAgfVxuICAgIFJlc2l6ZUJhdGNoU2VydmljZS5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIG1ldGhvZCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnNjaGVkdWxlZC5wdXNoKHsgaW5zdGFuY2U6IGluc3RhbmNlLCBtZXRob2Q6IG1ldGhvZCB9KTtcbiAgICAgICAgaWYgKCF0aGlzLnN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbiA9IHJ4anNfMS5mcm9tKF90aGlzLnJlc29sdmVkUHJvbWlzZSlcbiAgICAgICAgICAgICAgICAgICAgLnN1YnNjcmliZShfdGhpcy5mbHVzaCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgUmVzaXplQmF0Y2hTZXJ2aWNlLnByb3RvdHlwZS5pc1NjaGVkdWxlZCA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLnNjaGVkdWxlZC5maW5kKGZ1bmN0aW9uIChpdGVtKSB7IHJldHVybiBpdGVtLmluc3RhbmNlID09PSBpbnN0YW5jZTsgfSkpO1xuICAgIH07XG4gICAgUmVzaXplQmF0Y2hTZXJ2aWNlLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgdmFyIHNjaGVkdWxlZCA9IHRoaXMuc2NoZWR1bGVkO1xuICAgICAgICB2YXIgY291bnQgPSBzY2hlZHVsZWQubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBjb3VudDsgaWR4KyspIHtcbiAgICAgICAgICAgIGlmIChzY2hlZHVsZWRbaWR4XS5pbnN0YW5jZSA9PT0gaW5zdGFuY2UpIHtcbiAgICAgICAgICAgICAgICBzY2hlZHVsZWQuc3BsaWNlKGlkeCwgMSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzY2hlZHVsZWQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBSZXNpemVCYXRjaFNlcnZpY2UucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBSZXNpemVCYXRjaFNlcnZpY2UucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFJlc2l6ZUJhdGNoU2VydmljZS5wcm90b3R5cGUuZmx1c2ggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2NoZWR1bGVkLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgICAgIGl0ZW0ubWV0aG9kLmNhbGwoaXRlbS5pbnN0YW5jZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNjaGVkdWxlZCA9IFtdO1xuICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgICBSZXNpemVCYXRjaFNlcnZpY2UgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSgpLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbY29yZV8xLk5nWm9uZV0pXG4gICAgXSwgUmVzaXplQmF0Y2hTZXJ2aWNlKTtcbiAgICByZXR1cm4gUmVzaXplQmF0Y2hTZXJ2aWNlO1xufSgpKTtcbmV4cG9ydHMuUmVzaXplQmF0Y2hTZXJ2aWNlID0gUmVzaXplQmF0Y2hTZXJ2aWNlO1xuIl19