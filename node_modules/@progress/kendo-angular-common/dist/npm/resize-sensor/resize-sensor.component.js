/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var core_1 = require("@angular/core");
var operators_1 = require("rxjs/operators");
var compat_service_1 = require("./compat.service");
var observer_service_1 = require("./observer.service");
var resize_batch_service_1 = require("./resize-batch.service");
/**
 * Emit up to 10 resize events per second by default.
 * Chosen as a compromise between responsiveness and performance.
 */
var ɵngcc0 = require('@angular/core');
var ɵngcc1 = require('./resize-batch.service');
var DEFAULT_RATE_LIMIT = 10;
/**
 * Resize Sensor Component
 *
 * Triggers a "resize" event whenever the parent DOM element size changes.
 */
var ResizeSensorComponent = /** @class */ (function () {
    function ResizeSensorComponent(resizeBatchService, element, ngZone) {
        var _this = this;
        /**
         * The maximum number of resize events to emit per second.
         *
         * Defaults to 10.
         */
        this.rateLimit = DEFAULT_RATE_LIMIT;
        /**
         * Fires when the parent DOM element has been resized.
         */
        this.resize = new core_1.EventEmitter();
        var serviceType = observer_service_1.ResizeObserverService.supported() ? observer_service_1.ResizeObserverService : compat_service_1.ResizeCompatService;
        this.resizeService = new serviceType(resizeBatchService, element, ngZone);
        var throttleTime = 1000 / (this.rateLimit || DEFAULT_RATE_LIMIT);
        this.subscription = this.resizeService.resize
            .pipe(operators_1.auditTime(throttleTime))
            .subscribe(function () {
            if (!_this.resizeService.acceptedSize) {
                _this.resize.emit();
            }
        });
    }
    ResizeSensorComponent.prototype.ngAfterViewChecked = function () {
        this.resizeService.checkChanges();
    };
    ResizeSensorComponent.prototype.ngOnDestroy = function () {
        this.subscription.unsubscribe();
        this.resizeService.destroy();
    };
    ResizeSensorComponent.prototype.acceptSize = function (size) {
        this.resizeService.acceptSize(size);
    };
    tslib_1.__decorate([
        core_1.Input(),
        tslib_1.__metadata("design:type", Number)
    ], ResizeSensorComponent.prototype, "rateLimit", void 0);
    tslib_1.__decorate([
        core_1.Output(),
        tslib_1.__metadata("design:type", core_1.EventEmitter)
    ], ResizeSensorComponent.prototype, "resize", void 0);
    ResizeSensorComponent = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [resize_batch_service_1.ResizeBatchService, core_1.ElementRef, core_1.NgZone])
    ], ResizeSensorComponent);
ResizeSensorComponent.ɵfac = function ResizeSensorComponent_Factory(t) { return new (t || ResizeSensorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ResizeBatchService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ResizeSensorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ResizeSensorComponent, selectors: [["kendo-resize-sensor"]], inputs: { rateLimit: "rateLimit" }, outputs: { resize: "resize" }, decls: 0, vars: 0, template: function ResizeSensorComponent_Template(rf, ctx) { }, encapsulation: 2 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResizeSensorComponent, [{
        type: core_1.Component,
        args: [{
                selector: 'kendo-resize-sensor',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc1.ResizeBatchService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { rateLimit: [{
            type: core_1.Input
        }], resize: [{
            type: core_1.Output
        }] }); })();
    return ResizeSensorComponent;
}());
exports.ResizeSensorComponent = ResizeSensorComponent;

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLXNlbnNvci5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbInJlc2l6ZS1zZW5zb3IuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFLTztBQUNQOzs7Ozs7Ozs7Ozs7O29CQUE4QjtBQUM5QjtBQUNBO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIG9wZXJhdG9yc18xID0gcmVxdWlyZShcInJ4anMvb3BlcmF0b3JzXCIpO1xudmFyIGNvbXBhdF9zZXJ2aWNlXzEgPSByZXF1aXJlKFwiLi9jb21wYXQuc2VydmljZVwiKTtcbnZhciBvYnNlcnZlcl9zZXJ2aWNlXzEgPSByZXF1aXJlKFwiLi9vYnNlcnZlci5zZXJ2aWNlXCIpO1xudmFyIHJlc2l6ZV9iYXRjaF9zZXJ2aWNlXzEgPSByZXF1aXJlKFwiLi9yZXNpemUtYmF0Y2guc2VydmljZVwiKTtcbi8qKlxuICogRW1pdCB1cCB0byAxMCByZXNpemUgZXZlbnRzIHBlciBzZWNvbmQgYnkgZGVmYXVsdC5cbiAqIENob3NlbiBhcyBhIGNvbXByb21pc2UgYmV0d2VlbiByZXNwb25zaXZlbmVzcyBhbmQgcGVyZm9ybWFuY2UuXG4gKi9cbnZhciBERUZBVUxUX1JBVEVfTElNSVQgPSAxMDtcbi8qKlxuICogUmVzaXplIFNlbnNvciBDb21wb25lbnRcbiAqXG4gKiBUcmlnZ2VycyBhIFwicmVzaXplXCIgZXZlbnQgd2hlbmV2ZXIgdGhlIHBhcmVudCBET00gZWxlbWVudCBzaXplIGNoYW5nZXMuXG4gKi9cbnZhciBSZXNpemVTZW5zb3JDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUmVzaXplU2Vuc29yQ29tcG9uZW50KHJlc2l6ZUJhdGNoU2VydmljZSwgZWxlbWVudCwgbmdab25lKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgbWF4aW11bSBudW1iZXIgb2YgcmVzaXplIGV2ZW50cyB0byBlbWl0IHBlciBzZWNvbmQuXG4gICAgICAgICAqXG4gICAgICAgICAqIERlZmF1bHRzIHRvIDEwLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5yYXRlTGltaXQgPSBERUZBVUxUX1JBVEVfTElNSVQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlcyB3aGVuIHRoZSBwYXJlbnQgRE9NIGVsZW1lbnQgaGFzIGJlZW4gcmVzaXplZC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmVzaXplID0gbmV3IGNvcmVfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdmFyIHNlcnZpY2VUeXBlID0gb2JzZXJ2ZXJfc2VydmljZV8xLlJlc2l6ZU9ic2VydmVyU2VydmljZS5zdXBwb3J0ZWQoKSA/IG9ic2VydmVyX3NlcnZpY2VfMS5SZXNpemVPYnNlcnZlclNlcnZpY2UgOiBjb21wYXRfc2VydmljZV8xLlJlc2l6ZUNvbXBhdFNlcnZpY2U7XG4gICAgICAgIHRoaXMucmVzaXplU2VydmljZSA9IG5ldyBzZXJ2aWNlVHlwZShyZXNpemVCYXRjaFNlcnZpY2UsIGVsZW1lbnQsIG5nWm9uZSk7XG4gICAgICAgIHZhciB0aHJvdHRsZVRpbWUgPSAxMDAwIC8gKHRoaXMucmF0ZUxpbWl0IHx8IERFRkFVTFRfUkFURV9MSU1JVCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5yZXNpemVTZXJ2aWNlLnJlc2l6ZVxuICAgICAgICAgICAgLnBpcGUob3BlcmF0b3JzXzEuYXVkaXRUaW1lKHRocm90dGxlVGltZSkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghX3RoaXMucmVzaXplU2VydmljZS5hY2NlcHRlZFNpemUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yZXNpemUuZW1pdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgUmVzaXplU2Vuc29yQ29tcG9uZW50LnByb3RvdHlwZS5uZ0FmdGVyVmlld0NoZWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmVzaXplU2VydmljZS5jaGVja0NoYW5nZXMoKTtcbiAgICB9O1xuICAgIFJlc2l6ZVNlbnNvckNvbXBvbmVudC5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIHRoaXMucmVzaXplU2VydmljZS5kZXN0cm95KCk7XG4gICAgfTtcbiAgICBSZXNpemVTZW5zb3JDb21wb25lbnQucHJvdG90eXBlLmFjY2VwdFNpemUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICAgICAgICB0aGlzLnJlc2l6ZVNlcnZpY2UuYWNjZXB0U2l6ZShzaXplKTtcbiAgICB9O1xuICAgIHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbnB1dCgpLFxuICAgICAgICB0c2xpYl8xLl9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBOdW1iZXIpXG4gICAgXSwgUmVzaXplU2Vuc29yQ29tcG9uZW50LnByb3RvdHlwZSwgXCJyYXRlTGltaXRcIiwgdm9pZCAwKTtcbiAgICB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuT3V0cHV0KCksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIGNvcmVfMS5FdmVudEVtaXR0ZXIpXG4gICAgXSwgUmVzaXplU2Vuc29yQ29tcG9uZW50LnByb3RvdHlwZSwgXCJyZXNpemVcIiwgdm9pZCAwKTtcbiAgICBSZXNpemVTZW5zb3JDb21wb25lbnQgPSB0c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuQ29tcG9uZW50KHtcbiAgICAgICAgICAgIHNlbGVjdG9yOiAna2VuZG8tcmVzaXplLXNlbnNvcicsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJydcbiAgICAgICAgfSksXG4gICAgICAgIHRzbGliXzEuX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtyZXNpemVfYmF0Y2hfc2VydmljZV8xLlJlc2l6ZUJhdGNoU2VydmljZSwgY29yZV8xLkVsZW1lbnRSZWYsIGNvcmVfMS5OZ1pvbmVdKVxuICAgIF0sIFJlc2l6ZVNlbnNvckNvbXBvbmVudCk7XG4gICAgcmV0dXJuIFJlc2l6ZVNlbnNvckNvbXBvbmVudDtcbn0oKSk7XG5leHBvcnRzLlJlc2l6ZVNlbnNvckNvbXBvbmVudCA9IFJlc2l6ZVNlbnNvckNvbXBvbmVudDtcbiJdfQ==