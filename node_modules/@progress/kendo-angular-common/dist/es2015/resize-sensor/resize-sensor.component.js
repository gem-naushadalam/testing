/**-----------------------------------------------------------------------------------------
* Copyright © 2020 Progress Software Corporation. All rights reserved.
* Licensed under commercial license. See LICENSE.md in the project root for more information
*-------------------------------------------------------------------------------------------*/
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ElementRef, NgZone } from '@angular/core';
import { auditTime } from 'rxjs/operators';
import { ResizeCompatService } from './compat.service';
import { ResizeObserverService } from './observer.service';
import { ResizeBatchService } from './resize-batch.service';
/**
 * Emit up to 10 resize events per second by default.
 * Chosen as a compromise between responsiveness and performance.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './resize-batch.service';
const DEFAULT_RATE_LIMIT = 10;
/**
 * Resize Sensor Component
 *
 * Triggers a "resize" event whenever the parent DOM element size changes.
 */
let ResizeSensorComponent = class ResizeSensorComponent {
    constructor(resizeBatchService, element, ngZone) {
        /**
         * The maximum number of resize events to emit per second.
         *
         * Defaults to 10.
         */
        this.rateLimit = DEFAULT_RATE_LIMIT;
        /**
         * Fires when the parent DOM element has been resized.
         */
        this.resize = new EventEmitter();
        const serviceType = ResizeObserverService.supported() ? ResizeObserverService : ResizeCompatService;
        this.resizeService = new serviceType(resizeBatchService, element, ngZone);
        const throttleTime = 1000 / (this.rateLimit || DEFAULT_RATE_LIMIT);
        this.subscription = this.resizeService.resize
            .pipe(auditTime(throttleTime))
            .subscribe(() => {
            if (!this.resizeService.acceptedSize) {
                this.resize.emit();
            }
        });
    }
    ngAfterViewChecked() {
        this.resizeService.checkChanges();
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
        this.resizeService.destroy();
    }
    acceptSize(size) {
        this.resizeService.acceptSize(size);
    }
};
ResizeSensorComponent.ɵfac = function ResizeSensorComponent_Factory(t) { return new (t || ResizeSensorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ResizeBatchService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };
ResizeSensorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ResizeSensorComponent, selectors: [["kendo-resize-sensor"]], inputs: { rateLimit: "rateLimit" }, outputs: { resize: "resize" }, decls: 0, vars: 0, template: function ResizeSensorComponent_Template(rf, ctx) { }, encapsulation: 2 });
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], ResizeSensorComponent.prototype, "rateLimit", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], ResizeSensorComponent.prototype, "resize", void 0);
ResizeSensorComponent = tslib_1.__decorate([ tslib_1.__metadata("design:paramtypes", [ResizeBatchService, ElementRef, NgZone])
], ResizeSensorComponent);
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ResizeSensorComponent, [{
        type: Component,
        args: [{
                selector: 'kendo-resize-sensor',
                template: ''
            }]
    }], function () { return [{ type: ɵngcc1.ResizeBatchService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }]; }, { rateLimit: [{
            type: Input
        }], resize: [{
            type: Output
        }] }); })();
export { ResizeSensorComponent };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLXNlbnNvci5jb21wb25lbnQuanMiLCJzb3VyY2VzIjpbInJlc2l6ZS1zZW5zb3IuY29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztxU0FBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FLRztBQUNIOzs7Ozs7Ozs7OztvQkFBMEI7QUFDMUIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuKiBDb3B5cmlnaHQgwqkgMjAyMCBQcm9ncmVzcyBTb2Z0d2FyZSBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiogTGljZW5zZWQgdW5kZXIgY29tbWVyY2lhbCBsaWNlbnNlLiBTZWUgTElDRU5TRS5tZCBpbiB0aGUgcHJvamVjdCByb290IGZvciBtb3JlIGluZm9ybWF0aW9uXG4qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5pbXBvcnQgKiBhcyB0c2xpYl8xIGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIEVsZW1lbnRSZWYsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgYXVkaXRUaW1lIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUmVzaXplQ29tcGF0U2VydmljZSB9IGZyb20gJy4vY29tcGF0LnNlcnZpY2UnO1xuaW1wb3J0IHsgUmVzaXplT2JzZXJ2ZXJTZXJ2aWNlIH0gZnJvbSAnLi9vYnNlcnZlci5zZXJ2aWNlJztcbmltcG9ydCB7IFJlc2l6ZUJhdGNoU2VydmljZSB9IGZyb20gJy4vcmVzaXplLWJhdGNoLnNlcnZpY2UnO1xuLyoqXG4gKiBFbWl0IHVwIHRvIDEwIHJlc2l6ZSBldmVudHMgcGVyIHNlY29uZCBieSBkZWZhdWx0LlxuICogQ2hvc2VuIGFzIGEgY29tcHJvbWlzZSBiZXR3ZWVuIHJlc3BvbnNpdmVuZXNzIGFuZCBwZXJmb3JtYW5jZS5cbiAqL1xuY29uc3QgREVGQVVMVF9SQVRFX0xJTUlUID0gMTA7XG4vKipcbiAqIFJlc2l6ZSBTZW5zb3IgQ29tcG9uZW50XG4gKlxuICogVHJpZ2dlcnMgYSBcInJlc2l6ZVwiIGV2ZW50IHdoZW5ldmVyIHRoZSBwYXJlbnQgRE9NIGVsZW1lbnQgc2l6ZSBjaGFuZ2VzLlxuICovXG5sZXQgUmVzaXplU2Vuc29yQ29tcG9uZW50ID0gY2xhc3MgUmVzaXplU2Vuc29yQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcihyZXNpemVCYXRjaFNlcnZpY2UsIGVsZW1lbnQsIG5nWm9uZSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIG1heGltdW0gbnVtYmVyIG9mIHJlc2l6ZSBldmVudHMgdG8gZW1pdCBwZXIgc2Vjb25kLlxuICAgICAgICAgKlxuICAgICAgICAgKiBEZWZhdWx0cyB0byAxMC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMucmF0ZUxpbWl0ID0gREVGQVVMVF9SQVRFX0xJTUlUO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZXMgd2hlbiB0aGUgcGFyZW50IERPTSBlbGVtZW50IGhhcyBiZWVuIHJlc2l6ZWQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlc2l6ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgY29uc3Qgc2VydmljZVR5cGUgPSBSZXNpemVPYnNlcnZlclNlcnZpY2Uuc3VwcG9ydGVkKCkgPyBSZXNpemVPYnNlcnZlclNlcnZpY2UgOiBSZXNpemVDb21wYXRTZXJ2aWNlO1xuICAgICAgICB0aGlzLnJlc2l6ZVNlcnZpY2UgPSBuZXcgc2VydmljZVR5cGUocmVzaXplQmF0Y2hTZXJ2aWNlLCBlbGVtZW50LCBuZ1pvbmUpO1xuICAgICAgICBjb25zdCB0aHJvdHRsZVRpbWUgPSAxMDAwIC8gKHRoaXMucmF0ZUxpbWl0IHx8IERFRkFVTFRfUkFURV9MSU1JVCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5yZXNpemVTZXJ2aWNlLnJlc2l6ZVxuICAgICAgICAgICAgLnBpcGUoYXVkaXRUaW1lKHRocm90dGxlVGltZSkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghdGhpcy5yZXNpemVTZXJ2aWNlLmFjY2VwdGVkU2l6ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplLmVtaXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcbiAgICAgICAgdGhpcy5yZXNpemVTZXJ2aWNlLmNoZWNrQ2hhbmdlcygpO1xuICAgIH1cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgdGhpcy5yZXNpemVTZXJ2aWNlLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgYWNjZXB0U2l6ZShzaXplKSB7XG4gICAgICAgIHRoaXMucmVzaXplU2VydmljZS5hY2NlcHRTaXplKHNpemUpO1xuICAgIH1cbn07XG50c2xpYl8xLl9fZGVjb3JhdGUoW1xuICAgIElucHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgTnVtYmVyKVxuXSwgUmVzaXplU2Vuc29yQ29tcG9uZW50LnByb3RvdHlwZSwgXCJyYXRlTGltaXRcIiwgdm9pZCAwKTtcbnRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgT3V0cHV0KCksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgRXZlbnRFbWl0dGVyKVxuXSwgUmVzaXplU2Vuc29yQ29tcG9uZW50LnByb3RvdHlwZSwgXCJyZXNpemVcIiwgdm9pZCAwKTtcblJlc2l6ZVNlbnNvckNvbXBvbmVudCA9IHRzbGliXzEuX19kZWNvcmF0ZShbXG4gICAgQ29tcG9uZW50KHtcbiAgICAgICAgc2VsZWN0b3I6ICdrZW5kby1yZXNpemUtc2Vuc29yJyxcbiAgICAgICAgdGVtcGxhdGU6ICcnXG4gICAgfSksXG4gICAgdHNsaWJfMS5fX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW1Jlc2l6ZUJhdGNoU2VydmljZSwgRWxlbWVudFJlZiwgTmdab25lXSlcbl0sIFJlc2l6ZVNlbnNvckNvbXBvbmVudCk7XG5leHBvcnQgeyBSZXNpemVTZW5zb3JDb21wb25lbnQgfTtcbiJdfQ==