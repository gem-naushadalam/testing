import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Platform } from '@angular/cdk/platform';
import { ChangeDetectorRef, Component, ElementRef, forwardRef, Input, Optional, Self, ViewChild, ViewEncapsulation, Directive, ContentChild } from '@angular/core';
import { FormGroupDirective, NgControl, NgForm } from '@angular/forms';
import { ErrorStateMatcher, mixinErrorState } from '@angular/material/core';
import { MatFormFieldControl } from '@angular/material/form-field';
import { Subject } from 'rxjs';
let nextUniqueId = 0;
class NgxMatInputBase {
    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, 
    /** @docs-private */
    ngControl) {
        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;
        this._parentForm = _parentForm;
        this._parentFormGroup = _parentFormGroup;
        this.ngControl = ngControl;
    }
}
const _NgxMatInputMixinBase = mixinErrorState(NgxMatInputBase);
export class NgxMatFileInputIcon {
}
NgxMatFileInputIcon.decorators = [
    { type: Directive, args: [{
                selector: '[ngxMatFileInputIcon]'
            },] }
];
export class NgxMatFileInputComponent extends _NgxMatInputMixinBase {
    constructor(_elementRef, _platform, _cd, ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher) {
        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);
        this._elementRef = _elementRef;
        this._platform = _platform;
        this._cd = _cd;
        this.ngControl = ngControl;
        this.color = 'primary';
        this.fileNames = null;
        this._uid = `ngx-mat-fileinput-${nextUniqueId++}`;
        this.stateChanges = new Subject();
        this.focused = false;
        this.controlType = 'ngx-mat-file-input';
        this.autofilled = false;
        /** Function when touched */
        this._onTouched = () => { };
        /** Function when changed */
        this._onChange = () => { };
        this._disabled = false;
        this._multiple = false;
        this.placeholder = 'Choose a file';
        this.separator = ',';
        this._required = false;
        this._readonly = true;
        this.id = this.id;
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
        }
    }
    get disabled() {
        if (this.ngControl && this.ngControl.disabled !== null) {
            return this.ngControl.disabled;
        }
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        if (this.focused) {
            this.focused = false;
            this.stateChanges.next();
        }
    }
    get id() { return this._id; }
    set id(value) { this._id = value || this._uid; }
    get multiple() { return this._multiple; }
    set multiple(value) {
        this._multiple = coerceBooleanProperty(value);
    }
    get required() { return this._required; }
    set required(value) { this._required = coerceBooleanProperty(value); }
    get value() { return this._value; }
    set value(value) {
        this._value = value;
    }
    get readonly() { return this._readonly; }
    set readonly(value) { this._readonly = coerceBooleanProperty(value); }
    /**
     * Limiting accepted file types
     * Example: accept="image/png, image/jpeg" or accept=".png, .jpg, .jpeg" â€” Accept PNG or JPEG files.
     */
    get accept() { return this._accept; }
    set accept(value) {
        this._accept = value;
    }
    ngOnChanges() {
        this.stateChanges.next();
    }
    ngOnDestroy() {
        this.stateChanges.complete();
    }
    ngDoCheck() {
        if (this.ngControl) {
            this.updateErrorState();
        }
    }
    // Implemented as part of ControlValueAccessor.
    writeValue(value) {
        this._updateInputValue(value);
    }
    // Implemented as part of ControlValueAccessor.
    registerOnChange(fn) {
        this._onChange = fn;
    }
    // Implemented as part of ControlValueAccessor.
    registerOnTouched(fn) {
        this._onTouched = fn;
    }
    // Implemented as part of ControlValueAccessor.
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.stateChanges.next();
    }
    /** Focuses the input. */
    focus(options) {
        this._inputValueRef.nativeElement.focus(options);
    }
    _focusChanged(isFocused) {
        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {
            this.focused = isFocused;
            this.stateChanges.next();
        }
    }
    /** Mark the field as touched */
    _markAsTouched() {
        this._onTouched();
        this._cd.markForCheck();
        this.stateChanges.next();
    }
    _isBadInput() {
        let validity = this._inputValueRef.nativeElement.validity;
        return validity && validity.badInput;
    }
    get empty() {
        return !this._inputValueRef.nativeElement.value && !this._isBadInput() &&
            !this.autofilled;
    }
    get shouldLabelFloat() {
        return this.focused || !this.empty;
    }
    setDescribedByIds(ids) {
        this._ariaDescribedby = ids.join(' ');
    }
    openFilePicker(event) {
        this._inputFileRef.nativeElement.click();
        if (event) {
            event.preventDefault();
            event.stopPropagation();
        }
        this._markAsTouched();
    }
    handleFiles(filelist) {
        if (filelist.length > 0) {
            const files = new Array();
            for (let i = 0; i < filelist.length; i++) {
                files.push(filelist.item(i));
            }
            this._updateInputValue(files);
            this._resetInputFile();
            this._onChange(this.multiple ? files : files[0]);
        }
    }
    /** Handles a click on the control's container. */
    onContainerClick(event) { }
    ;
    _resetInputFile() {
        this._inputFileRef.nativeElement.value = "";
    }
    _updateInputValue(files) {
        let text = null;
        if (files) {
            if (Array.isArray(files)) {
                text = this._multiple
                    ? files.map(x => x.name).join(this.separator)
                    : files[0].name;
            }
            else {
                text = files.name != null ? files.name : null;
            }
        }
        this._inputValueRef.nativeElement.value = text;
    }
}
NgxMatFileInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-mat-file-input',
                template: "<input #inputValue autocomplete=\"off\" class=\"mat-input-element mat-form-field-autofill-control\" [attr.id]='id'\r\n  [attr.placeholder]='placeholder' [disabled]='disabled' [required]='required' [attr.readonly]='readonly || null'\r\n  [attr.aria-describedby]='_ariaDescribedby || null' [attr.aria-invalid]='errorState'\r\n  [attr.aria-required]='required.toString()'>\r\n<div class=\"mat-form-field-suffix\">\r\n  <button matSuffix mat-icon-button [color]=\"color\" class=\"button-browse\"  (click)=\"openFilePicker($event)\" type=\"button\"\r\n   [disabled]=\"disabled\">\r\n    <mat-icon *ngIf=\"!_customIcon\" class=\"ngx-mat-file-input--default-icon\">attach_file</mat-icon>\r\n    <ng-content select=\"[ngxMatFileInputIcon]\"></ng-content>\r\n  </button>\r\n</div>\r\n<input type=\"file\" #inputFile (change)=\"handleFiles($event.target.files)\" class=\"input-file\"\r\n  [multiple]=\"multiple\" [accept]=\"accept\">",
                encapsulation: ViewEncapsulation.None,
                host: {
                    'class': 'ngx-mat-file-input'
                },
                providers: [
                    { provide: MatFormFieldControl, useExisting: forwardRef(() => NgxMatFileInputComponent) }
                ],
                exportAs: 'ngx-mat-file-input',
                styles: [".mat-form-field-appearance-legacy .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field-appearance-legacy .mat-form-field-suffix .ngx-mat-file-input--default-icon{width:1em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .ngx-mat-file-input--default-icon{display:block;width:1.5em;height:1.5em}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .ngx-mat-file-input--default-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .ngx-mat-file-input--default-icon{margin:auto}.ngx-mat-file-input{display:flex;line-height:18px;height:18px;align-items:center}.ngx-mat-file-input .input-file{display:block;visibility:hidden;width:0;height:0}"]
            },] }
];
/** @nocollapse */
NgxMatFileInputComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Platform },
    { type: ChangeDetectorRef },
    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },
    { type: NgForm, decorators: [{ type: Optional }] },
    { type: FormGroupDirective, decorators: [{ type: Optional }] },
    { type: ErrorStateMatcher }
];
NgxMatFileInputComponent.propDecorators = {
    _inputFileRef: [{ type: ViewChild, args: ['inputFile', { static: true },] }],
    _inputValueRef: [{ type: ViewChild, args: ['inputValue', { static: true },] }],
    _customIcon: [{ type: ContentChild, args: [NgxMatFileInputIcon,] }],
    color: [{ type: Input }],
    disabled: [{ type: Input }],
    id: [{ type: Input }],
    multiple: [{ type: Input }],
    placeholder: [{ type: Input }],
    separator: [{ type: Input }],
    required: [{ type: Input }],
    errorStateMatcher: [{ type: Input }],
    value: [{ type: Input }],
    readonly: [{ type: Input }],
    accept: [{ type: Input }]
};
//# sourceMappingURL=data:application/json;base64,