import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { MatSelectFilterComponent } from './mat-select-filter.component';
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export class MatSelectFilterModule {
}
MatSelectFilterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSelectFilterModule });
MatSelectFilterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSelectFilterModule_Factory(t) { return new (t || MatSelectFilterModule)(); }, imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule,
            MatProgressSpinnerModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSelectFilterModule, { declarations: function () { return [MatSelectFilterComponent]; }, imports: function () { return [CommonModule,
        FormsModule,
        ReactiveFormsModule,
        MatProgressSpinnerModule]; }, exports: function () { return [MatSelectFilterComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSelectFilterModule, [{
        type: NgModule,
        args: [{
                declarations: [MatSelectFilterComponent],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    MatProgressSpinnerModule
                ],
                exports: [MatSelectFilterComponent]
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC1maWx0ZXIubW9kdWxlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tYXQtc2VsZWN0LWZpbHRlci9zcmMvbGliL21hdC1zZWxlY3QtZmlsdGVyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7O0FBV2xFLE1BQU0sT0FBTyxxQkFBcUI7QUFBRztpREFWcEMsUUFBUSxTQUFDLGtCQUNSO1NBQVksRUFBRSxDQUFDLHdCQUF3QixDQUFDLGtCQUN4QyxPQUFPLEVBQUUsc0JBQ1AsWUFBWSxzQkFDWixXQUFXLHNCQUNYO01BQW1CO0VBQ25CO0NBQXdCLGtCQUN6QjtJQUNELE9BQU8sRUFBRSxDQUFDO0NBQXdCLENBQUM7Q0FDcEM7Ozs7Ozs7Ozs7Ozs7Ozs7MEJBQ0k7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hdFByb2dyZXNzU3Bpbm5lck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsL3Byb2dyZXNzLXNwaW5uZXInO1xuaW1wb3J0IHsgTWF0U2VsZWN0RmlsdGVyQ29tcG9uZW50IH0gZnJvbSAnLi9tYXQtc2VsZWN0LWZpbHRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW01hdFNlbGVjdEZpbHRlckNvbXBvbmVudF0sXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBNYXRQcm9ncmVzc1NwaW5uZXJNb2R1bGVcbiAgXSxcbiAgZXhwb3J0czogW01hdFNlbGVjdEZpbHRlckNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgTWF0U2VsZWN0RmlsdGVyTW9kdWxlIHsgfVxuIl19